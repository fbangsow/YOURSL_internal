<!--Company Name: YOUR SL
    Author: Phani,Anudeep
    Page Name: PSOTable
    Description: Resource allocation utility for internal project managment
Versions:
    1.2 Added planned and unplanned functionality on date 01/03/2015
    1.1 Added filtering functionality on date 02/26/2015
    1.0 Intial version created on date 02/22/2015
-->
<!-- start of the page -->

<apex:page sidebar="false" name="PSOTable" controller="CtrPSOTable"  >
<apex:includeScript value="{!URLFOR($Resource.StreamingApiScripts,'jquery-1.5.1.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.StreamingApiScripts,'json2.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.StreamingApiScripts,'Cometd.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.StreamingApiScripts,'jquery.cometd.js')}"/>

<html>
    <head><title>PSOTable</title>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>

      <link rel="stylesheet"  href="{!$Resource.datepicker}"></link>
     <link rel="stylesheet"  href="{!$Resource.PsotoolCss}"></link>
       <script type="text/javascript" src="{!$Resource.PsoToolLibs}"></script>
      <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.17/jquery-ui.min.js"></script>
      <script src="/resource/1430742754000/PsoToolMomentjs"></script>
      <script src="/resource/1430888909000/PsoToolUnderscorejs"></script>


      <script type="text/javascript">
  var flagnxt = 1;
 var flag = 1;
 var weekdays = {};
 weekdays['1'] = "MO";
 weekdays['2'] = "TU";
 weekdays['3'] = "WE";
 weekdays['4'] = "TH";
 weekdays['5'] = "FR";
 weekdays['6'] = "SA";
 weekdays['7'] = "SU";

 function htmlDecode(value) {
     if (value) {
         return $('<div />').html(value).text();
     } else {
         return '';
     }
 }

 function enableMondayAndFirst(date) {

     var day = date.getDay();
     var firstDate = date.getDate();
     // If day == 1 then it is MOnday
     if (day == 1 || firstDate == 1) {

         return [true];

     } else {

         return [false];
     }

 }
 var startdateobj;
 var cancelclick = 1;
 var dataforna = 0;
 var universalobject = "";
 var clickedfoedata = 0;
 //Creating a module in angularjs
 var app = angular.module('myApp', []);
 app.factory('serviceforgetaccount', ['$q', '$rootScope', function($q, $rootScope) {
     return function() {
         var deferred = $q.defer();
         Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.CtrPSOTable.getAccount}', function(result, event) {
             $rootScope.$apply(function() {
                 if (event.status) {
                     deferred.resolve(result);
                 } else {
                     deferred.reject(event);
                 }
             })
         }, {
             buffer: true,
             escape: true,
             timeout: 30000
         });
         return deferred.promise;
     }
 }]);
 app.factory('serviceforgetaccountchange', ['$q', '$rootScope', function($q, $rootScope) {
     return function(a, dateparam) {
         var deferred = $q.defer();

         Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.CtrPSOTable.getAccountsonload}', a, dateparam, function(result, event) {
             $rootScope.$apply(function() {
                 if (event.status) {
                     deferred.resolve(result);
                 } else {
                     deferred.reject(event);
                 }
             })
         }, {
             buffer: true,
             escape: true,
             timeout: 30000
         });
         return deferred.promise;
     }
 }]);
 //Dataset creation and loading calendar
 app.factory('tempService', function() {
     //This function is used to bind calender inputs to table
     return {
         inputbindingtable: function(resultobject) {
             var factorytmp = resultobject;
             universalobject = factorytmp;
             var strtdate = factorytmp.StartDate;
             var enddate = factorytmp.EndDate;
             var splitstrtdate = strtdate.split(".");
             var splitenddate = enddate.split(".");
             var date = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
             var dateforenddate = new Date(splitenddate[2], parseInt(splitenddate[1]) - 1, splitenddate[0]);
             //difference between start date and end date
             var oneDay = 86400000; // hours*minutes*seconds*milliseconds
             var firstDate = new Date(splitenddate[2], parseInt(splitenddate[1]) - 1, splitenddate[0]);
             var secondDate = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
             var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
             var data = "";
             var day = date.getDay();
             var dateforenddate = parseInt(date.getDate());
             var year = parseInt(date.getFullYear());
             var month = parseInt(date.getMonth()) + 1;

             if (day == 0) {
                 day = 7;
             }
             var k = parseInt(day);
             var lp = leapYear(year);
             var dt;
             dt = dateforenddate;

             for (j = 0; j <= parseInt(diffDays); j++) {

                 if (month == 2) {
                     if (lp) {
                         if (dt == 30) {
                             dt = 1;
                             month = month + 1;
                         }
                     } else {
                         if (dt == 29) {
                             dt = 1;
                             month = month + 1;
                         }
                     }
                 } else if (month == 4 || month == 6 || month == 9 || month == 11) {
                     if (dt == 31) {
                         dt = 1;
                         month = month + 1;
                     }
                 } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
                     if (month == 12) {
                         if (dt == 32) {
                             dt = 1;
                             month = 1;
                             year = year + 1;
                         }
                     } else if (dt == 32) {
                         dt = 1;
                         month = month + 1;
                     }
                 }

                 var a = dt + "." + month + "." + year;
                 var b = weekdays[k] + dt;
                 var cmbne = month + "-" + dt + "-" + year;
                 var weekno1 = moment(cmbne, "MM-DD-YYYY").startOf('isoweek').week();
                 weekno1 = weekno1;
                 if (j == 0) {

                     if (weekdays[k] == "SU") {

                         data = data + '<td><input name="' + a + '" class="inputfields greycolorsat ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '" ng-model-ngblur="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td><td><input type="text" name="' + weekno1 + '" class="drdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '" class="dadot inputfields" disabled="true"></td>';
                     } else {
                         data = data + '<td><input name="' + a + '" class="inputfields ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '" ng-model-ngblur="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td>';
                     }
                 } else if (j == parseInt(diffDays)) {

                     var month1 = parseInt(month) + 1;

                     if (weekdays[k] == "SA" || weekdays[k] == "SU") {



                         data = data + '<td><input name="' + a + '" class="inputfields greycolorsat ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '" ng-model-ngblur="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td><td><input type="text" name="' + weekno1 + '" class="mwdrdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '" class="mwdadot inputfields" disabled="true"></td><td><input type="text" name="' + month1 + '" class="mdrdot inputfields" disabled="true"></td><td><input type="text" name="' + month1 + '" class="mdadot inputfields" disabled="true"></td><td><input type="text" name="' + month1 + '" class="inputfields plnperhur" disabled="true"></td>';
                     } else {


                         data = data + '<td><input name="' + a + '" class="inputfields ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '" ng-model-ngblur="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td><td><input type="text" name="' + weekno1 + '" class="mwdrdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '" class="mwdadot inputfields" disabled="true"></td><td><input type="text" name="' + month1 + '" class="mdrdot inputfields" disabled="true"></td><td><input type="text" name="' + month1 + '" class="mdadot inputfields" disabled="true"></td><td><input type="text" name="' + month1 + '" class="inputfields plnperhur" disabled="true"></td>';
                     }
                 } else if (weekdays[k] == "SA" || weekdays[k] == "SU") {
                     if (weekdays[k] == "SU") {


                         if (parseInt(dt) == 1) {


                             data = data + '<td><input type="text" name="' + weekno1 + '"  class="mwdrdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '" class="mwdadot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdrdot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdadot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="inputfields plnperhur" disabled="true"></td><td><input name="' + a + '" class="inputfields greycolorsat ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '" ng-model-ngblur="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td><td><input type="text" name="' + weekno1 + '" class="drdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '" class="dadot inputfields" disabled="true"></td>';
                         } else {


                             data = data + '<td><input name="' + a + '" class="inputfields greycolorsat ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '"  ng-model-ngblur="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td><td><input type="text" name="' + weekno1 + '" class="drdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '" class="dadot inputfields" disabled="true"></td>';
                         }
                     } else {

                         if (parseInt(dt) == 1) {


                             data = data + '<td><input type="text" name="' + weekno1 + '"  class="mwdrdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '"  class="mwdadot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdrdot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdadot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="inputfields plnperhur" disabled="true"></td><td><input name="' + a + '" class="inputfields greycolorsat ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '"  ng-model-ngblur="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td>';
                         } else {

                             data = data + '<td><input name="' + a + '"  ng-model-ngblur="' + weekdays[k] + dt + month + year + '" class="inputfields greycolorsat ' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-model="' + weekdays[k] + dt + month + year + '" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td>';
                         }
                     }
                 } else {

                     if (parseInt(dt) == 1) {
                         if (weekdays[k] == "MO") {

                             data = data + '<td><input type="text" name="' + month + '"  class="mdrdot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdadot inputfields" disabled="true"></td><td><input name="' + month + '" type="text" class="inputfields plnperhur" disabled="true"></td><td><input name="' + a + '" class="inputfields ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '"  ng-model-ngblur ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')" ></input></td>';
                         } else {


                             data = data + '<td><input type="text" name="' + weekno1 + '" class="mwdrdot inputfields"  disabled="true"></td><td><input type="text" name="' + weekno1 + '"  class="mwdadot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdrdot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdadot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="inputfields plnperhur" disabled="true"></td><td><input name="' + a + '" class="inputfields ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '" ng-model-ngblur ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')" ></input></td>';
                         }
                     } else {

                         data = data + '<td><input name="' + a + '"  class="inputfields ' + weekdays[k] + dt + month + year + '" ng-model-ngblur="' + weekdays[k] + dt + month + year + '"  ng-model="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')" ></input></td>';
                     }
                 }
                 dt++;
                 if (k % 7 == 0) {
                     k = 1;
                 } else {
                     k++;
                 }
             }
             data = "<td style='padding:0 5px !important'>{{dataval2.SalesPrice}}</td><td style='padding:0 5px !important'>{{dataval2.soldrev}} </td><td style='padding:0 5px !important'>{{dataval2.plnndreven}} </td><td style='padding:0 5px !important'>{{dataval2.LastModifiedDate|date:'d MMM yyyy'}}</td><td class='Staffing' style='display:none;'>{{dataval2.Staffing}}</td><td class='statical' style='display:none;'>{{dataval2.Statistics}}</td><td class='plnnedperq' style='display:none;'>{{dataval2.plndperq}}</td><td class='companyname widderclumn' ng-style='set_color(dataval2.AccountName)' >{{dataval2.AccountName}}</td><td class='contactidloop' style='display:none;'>{{dataval2.ContactId}}</td>" + data;
             return data;
         }
     }
 });
 //template for inputfields of calender Ends
 app.directive('onFinishRender', function($timeout) {
     return {
         restrict: 'A',
         link: function(scope, element, attr) {
             if (scope.$last === true) {
                 $timeout(function() {
                     scope.$emit('ngRepeatFinished');
                     scope.$emit('ngRepeatFinishedforselectbox');
                 });
             }
         }
     }
 });
 //Compile function for attaching template to scope Starts Here
 app.directive('compileData', function($compile) {
     return {
         scope: true,
         replace: true,
         link: function(scope, element, attrs) {
             var elmnt;
             attrs.$observe('template', function(myTemplate) {
                 if (angular.isDefined(myTemplate)) {
                     // compile the provided template against the current scope
                     elmnt = $compile(myTemplate)(scope);
                     element.html(""); // dummy "clear"
                     element.append(elmnt);
                 }
             });
         }
     };
 });
 //Directive for blur,keyup,keydown Starts Here
 app.directive(['focus', 'blur', 'change', 'keyup', 'keydown', 'keypress'].reduce(function(container, name) {
     var directiveName = 'ng' + name[0].toUpperCase() + name.substr(1);
     container[directiveName] = ['$parse', function($parse) {
         return function(scope, element, attr) {
             var fn = $parse(attr[directiveName]);
             element.bind(name, function(event) {
                 scope.$apply(function() {
                     fn(scope, {
                         $event: event
                     });
                 });
             });
         };
     }];
     return container;
 }, {}));
 //Controller Starts Here
 app.controller('MyCtrl', function($scope, $compile, serviceforgetaccount, serviceforgetaccountchange, tempService, $q) {


     $scope.streamingerror = function() {

         $(".popup,.blurbackgrund1,.blurbackgrund").attr("style", "display:none;");
     }
     $scope.saveerror = function() {
         $(".popup,.blurbackgrund,.blurbackgrund1").attr("style", "display:none");
         $(".cancelfun").val($('.cancelfun').attr('id'));

         colorcoding();
         $(".cancelfun").removeClass("cancelfun");

         $(".totalforcalndr").each(function(no) {
             $(this).find("td").each(function(no1) {
                 if (no1 > 3) {
                     $(this).remove();
                 }
             });
         });
         totalcaluculation();

         $(".Projects ").click();
     }
     $('.datepickerforbind').datepicker({
         beforeShowDay: enableMondayAndFirst
     });
     $('.strtdateinput').datepicker({
         changeMonth: true,
         changeYear: true,
         showButtonPanel: true,
         dateFormat: 'MM YY',
         minDate: -720,
         maxDate: +900

         //currentText: "Today:" + $.datepicker.formatDate('MM dd yy', new Date())

     }).click(function() {


         $(".strtdateinput").addClass("onff");
         var classdata = ($(".strtdateinput").attr("class")).split(" ");



         if (typeof classdata[2] !== "undefined") {


             var date = sessionStorage.getItem("datepickerval");
             var splitdate = date.split(" ");

             var a = parseInt(splitdate[0]) - 1;
             var year = parseInt(splitdate[1])
             $(".ui-datepicker-month option").each(function() {
                 $(this).attr("selected", false);

                 if ($(this).val() == a) {

                     $(this).attr("selected", true);
                 }
             });
             $(".ui-datepicker-year option").each(function() {
                 $(this).attr("selected", false);

                 if ($(this).val() == parseInt(year)) {

                     $(this).attr("selected", true);
                 }
             });



             var new_selection = $(".ui-datepicker-month").find('option:selected').val();

             $(".ui-datepicker-month").val(a);

             $(".strtdateinput").removeClass("onff");

         }


     }).focus(function() {
         var thisCalendar = $(this);
         $('.ui-datepicker-calendar').detach();
         $('.ui-datepicker-close').click(function() {
             var month = $("#ui-datepicker-div .ui-datepicker-month :selected").val();
             var year = $("#ui-datepicker-div .ui-datepicker-year :selected").val();
             $(".setstrtdateinput").val(parseInt(month) + 1 + " " + year);


         });

         var new_selection = $(".ui-datepicker-month").find('option:selected').val();

     })
     var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

     if (sessionStorage.getItem("datepickerval") != null) {

         $scope.splitdata = (sessionStorage.getItem("datepickerval")).split(" ");

         var datemnth = monthNames[$scope.splitdata[0] - 1];
         var date = datemnth + " " + $scope.splitdata[1];
         $(".setstrtdateinput,.strtdateinput").val(date);

     }
     $scope.rerunJobforerror = function() {

         var dateforjob = $(".datepickerforbind").val();

         if (dateforjob == "") {
             $(".joberrormsg").text("Please select Date before running the job");
             $('.joberrormsg').fadeIn('fast');
         } else {


             var datefordatepicker = $(".datepickerforbind").val();
             var date = datefordatepicker.toString().replace("/", ".");

             date = date.replace("/", ".")
             Visualforce.remoting.Manager.invokeAction(
                 '{!$RemoteAction.CtrPSOTable.runjobvalue}',
                 date,
                 function(result, event) {

                     var daatjson = htmlDecode(result);
                     var resultforerrormsg = JSON.parse(daatjson);
                     $(".appendtxt").text(" ");

                     if (resultforerrormsg.PlannedMonthEnd) {

                         $(".popup1 .appendtxt").append("Please confirm the following actions:</br>- planned statistics will be created from " + resultforerrormsg.PlannedWeekStart + " to " + resultforerrormsg.PlannedWeekEnd + "</br>- planned schedules will be replaced with time entries from " + resultforerrormsg.ActualWeekStart + " to " + resultforerrormsg.ActualWeekEnd + "</br>- actual statistics will be created from  " + resultforerrormsg.ActualWeekStart + " to " + resultforerrormsg.ActualWeekEnd + "</br>- planned statistics will be created from " + resultforerrormsg.PlannedMonthStart + "  to " + resultforerrormsg.PlannedMonthEnd + "</br>- actual statistics will be created from " + resultforerrormsg.ActualMonthStart + " to " + resultforerrormsg.ActualMonthEnd);
                     } else {

                         $(".popup1 .appendtxt").append("Please confirm the following actions:</br>- planned statistics will be created from " + resultforerrormsg.PlannedWeekStart + " to " + resultforerrormsg.PlannedWeekEnd + "</br>- planned schedules will be replaced with time entries from " + resultforerrormsg.ActualWeekStart + " to " + resultforerrormsg.ActualWeekEnd + "</br>- actual statistics will be created from  " + resultforerrormsg.ActualWeekStart + " to " + resultforerrormsg.ActualWeekEnd);
                     }

                     $(".popup1,.blurbackgrund").attr("style", "display:block");
                     $(".popup1").attr("style", "display:block;width:35%;left:27%");


                 }, {

                     escape: true
                 }
             );
         }

     }
     $scope.rerunJob = function() {

         $('.joberrormsg').fadeIn('fast');
         $(".joberrormsg").text("The job was successfully submitted, you'll see results in a few minutes");




         runjob();
         setTimeout(function() {
             $('.joberrormsg').fadeOut('slow');
         }, 5000); // <-- time in milliseconds

         $(".popup1,.blurbackgrund").attr("style", "display:none");
     }

     $scope.set_color = function(payment) {

         if (payment != "YOUR SL GmbH") {
             return {
                 background: "rgb(221, 221, 221)",
             }
         }
     }
     $scope.fileringonload = function(myDataSet) {
         var myDataSet = myDataSet;
         var newthing = [],
             customer = [],
             projectload = [];
         customer.push({
             "value": "All Account Names",
             "Id": "0"
         });
         projectload.push({
             "value": "All Opportunity Names",
             "Id": "0"
         });
         angular.forEach(myDataSet, function(a, b) {
             var project = new Array();
             angular.forEach(a.Projects, function(an, b) {
                 projectload.push({
                     "value": an.OpportunityName,
                     "Id": an.OpportunityId
                 });
                 project.push({
                     "name": an.OpportunityName,
                     "Id": an.OpportunityId
                 });
             })
             newthing.push({
                 "customer": a.AccountName,
                 "project": project
             });
             customer.push({
                 "value": a.AccountName,
                 "Id": a.AccountId
             });
         })
         $scope.persons = customer;
         $scope.projectdetails = newthing;
         var foo2 = _.unique(projectload, false, function(item, k, v) {
             return item;
         });
         $scope.projectsselect = foo2;
         $scope.blisterPackTemplateSelected = $scope.persons[0];
         $scope.projectsSelecteddata = $scope.projectsselect[0];


     }
     $scope.projecthealth = function(opptrtuntyid, changedvalue) {

         Visualforce.remoting.Manager.invokeAction(
             '{!$RemoteAction.CtrPSOTable.getChangedProjectHealth}', opptrtuntyid, changedvalue,

             function(result, event) {}, {

             }
         )



     }



     $scope.Customersfilter = function(ab) {

             var lengthforarray = 0;
             if (ab == "All Account Names") {
                 lengthforarray = $(".accountname option").length;

             } else {
                 $(".accountname option").each(function() {
                     if ($(this).val() == "All Account Names") {
                         $(this).attr("selected", false);
                     }

                 })

             }
             $(".multiSel").val("All Opportunity Names");
             var myDataSet = $scope.filterdata.Customers;
             startdateobj = $scope.dataval;
             var countforfilterdata = 0;

             if ($(".accountname option").length == lengthforarray) {
                 angular.forEach(ab, function(selectedvalueforcount, b) {
                     if (selectedvalueforcount == "All Account Names") {
                         countforfilterdata = 1;
                     }
                 })
             }
             var projects1 = new Array();
             if (countforfilterdata == 1) {
                 projects1.push({
                     "value": "All Opportunity Names",
                     "Id": "0"
                 })

                 angular.forEach($scope.projectdetails, function(a, b) {

                     angular.forEach(a.project, function(an, b) {
                         projects1.push({
                             "value": an.name,
                             "Id": an.Id
                         });
                     })

                 })

             } else {
                 projects1.push({
                     "value": "All Opportunity Names",
                     "Id": "0"
                 })
                 angular.forEach(ab, function(selectedvalue, b) {

                     angular.forEach($scope.projectdetails, function(a, b) {
                         if (a.customer == selectedvalue) {
                             angular.forEach(a.project, function(an, b) {
                                 projects1.push({
                                     "value": an.name,
                                     "Id": an.Id
                                 });
                             })
                         }
                     })
                 })


             }



             $scope.projectsselect = projects1;

         }
         //filtering of table based on input selection
     var myDataSet1;
     serviceforgetaccount().then(function(result) {

         var daatjson = htmlDecode(result);
         var resultobject = JSON.parse(daatjson);


         $scope.focusdata = "";
         //code for template of binding input field of calender
         var myDataSet1 = $scope.dataval1;
         $scope.filterdata = resultobject;
         myDataSet = resultobject.Customers;
         if (!resultobject.IsAllowedToRunScript) {


             $(".loginacess").attr("style", "display:none;")
         }
         startdateobj = resultobject;
         //Display customer and projects information on initial page load
         $scope.fileringonload(myDataSet);


         $scope.oppvalue = sessionStorage.getItem("oppname");
         if ($scope.oppvalue != null) {


             $(".oprid").val($scope.oppvalue);

             $scope.oppselectedvalue();
             $scope.accountname = sessionStorage.getItem("accname");


             var projects1 = new Array();
             if ($scope.accountname == "All Account Names") {
                 projects1.push({
                     "value": "All Opportunity Names",
                     "Id": "0"
                 })
                 angular.forEach($scope.projectdetails, function(a, b) {

                     angular.forEach(a.project, function(an, b) {
                         projects1.push({
                             "value": an.name,
                             "Id": an.Id
                         });
                     })

                 })

             } else {
                 projects1.push({
                     "value": "All Opportunity Names",
                     "Id": "0"
                 })

                 var Arraydata = new Array()
                 if ($scope.accountname.indexOf(",") < 0) {

                     Arraydata.push($scope.accountname);
                 } else {
                     Arraydata = $scope.accountname.split(",");
                 }
                 $.each(Arraydata, function(selectedvalue, bdata) {

                     angular.forEach($scope.projectdetails, function(a, b) {
                         if (a.customer == bdata) {
                             angular.forEach(a.project, function(an, b) {
                                 projects1.push({
                                     "value": an.name,
                                     "Id": an.Id
                                 });
                             })
                         }
                     })
                 })


             }



             $scope.projectsselect = projects1;

         }
     });

     $(".multiSel").click(function() {

         $(".accountname ").hide();
     })

     $(".Accountnamedsp").click(function() {

         $(".clickforselect  ").hide();
     })
     $(".dropdown dt a").on('click', function() {

         $(this).parent().parent().parent().find("dd .mutliSelect").slideToggle('fast');
     });

     $(".dropdown dd ul li a").on('click', function() {

         $(".dropdown dd select").hide();
     });

     function getSelectedValue(id) {

         return $("#" + id).find("dt a span.value").html();
     }

     $(document).bind('click', function(e) {

         var $clicked = $(e.target);
         if (!$clicked.parents().hasClass("dropdown")) $(".dropdown dd .mutliSelect").hide();
     });

     $scope.accountnamedsply = function(dsplydata) {

         $(".Accountnamedsp").val(dsplydata);
         sessionStorage.setItem("accname", dsplydata);

     }

     $(document).ready(function() {


         sessionStorage.setItem("datepickervalmonth", null);
         sessionStorage.setItem("datepickervalmonthfordata", null);

         flag = 1;
         flagnxt = 1;
     })

     $(document).on('click', '.strtdateinput', function() {
         sessionStorage.setItem("datepickervalmonth", null);
         sessionStorage.setItem("datepickervalmonthfordata", null);
         flag = 1;
         flagnxt = 1;


     });
     $(document).on('click', '.ui-datepicker-prev', function() {


         if (flag == 1 && sessionStorage.getItem("datepickervalmonthfordata") == "null") {


             var date = sessionStorage.getItem("datepickerval");

             var splitdate = date.split(" ");
             var a = parseInt(splitdate[0]);

             a = a - 1;
             if (a == 0) {

                 a = 11;
             } else if (a == 11) {

                 a = 0;
             }

             $(".ui-datepicker-month option").each(function() {


                 if ($(this).val() == a) {
                     //alert(a);

                     sessionStorage.setItem("datepickervalmonth", a);
                     sessionStorage.setItem("datepickervalmonthfordata", a);




                     $(this).attr("selected", true);
                 }
             })



             flag = 0;
         } else {

             var data = sessionStorage.getItem("datepickervalmonth");

             data = parseInt(data) - 1;
             if (data < 0) {

                 data = 11;
             } else if (data > 11) {

                 data = 0;
             }

             $(".ui-datepicker-month option").each(function() {

                 if ($(this).val() == parseInt(data)) {
                     sessionStorage.setItem("datepickervalmonth", parseInt(data));
                     sessionStorage.setItem("datepickervalmonthfordata", parseInt(data));

                     $(this).attr("selected", true);
                 }
             })


         }
     })


     $(document).on('click', '.ui-datepicker-next', function() {

         if (flagnxt == 1 && sessionStorage.getItem("datepickervalmonth") == "null") {


             var date = sessionStorage.getItem("datepickerval");

             var splitdate = date.split(" ");
             var a = parseInt(splitdate[0]) - 1;
             a = a + 1;
             if (a == 12) {

                 a = 0;
             }
             $(".ui-datepicker-month option").each(function() {

                 if ($(this).val() == a) {
                     sessionStorage.setItem("datepickervalmonth", a);
                     sessionStorage.setItem("datepickervalmonthfordata", a);

                     $(this).attr("selected", true);
                 }
             })
             flagnxt = 0;
         } else {

             var data = sessionStorage.getItem("datepickervalmonthfordata");

             data = parseInt(data) + 1;
             if (parseInt(data) >= 11) {

                 data = 0;
             }


             $(".ui-datepicker-month option").each(function() {

                 if ($(this).val() == parseInt(data)) {
                     sessionStorage.setItem("datepickervalmonthfordata", parseInt(data));
                     sessionStorage.setItem("datepickervalmonth", parseInt(data));

                     $(this).attr("selected", true);
                 }
             })


         }
     })
     $(document).on('click', '.accountname  option', function() {

         if ($(this).is(":selected")) {


             if ($(this).val() == "All Account Names") {
                 $('.accountname option').each(function(i, selected) {

                     if ($(this).val() != "All Account Names") {
                         $(this).attr("selected", true);
                     }
                 });

             }


         }
     });



     $scope.oprnameselect = function(a) {


         if (a == "0") {
             $('.clickforselect option').each(function(i, selected) {
                 if ($(this).is(":selected")) {

                     if ($(this).val() == 0) {
                         $('.clickforselect option').each(function(i, selected) {


                             $(this).attr("selected", true);

                         });

                     }


                 }
             });
         }
         var count = 0;
         $('.clickforselect option').each(function(i, selected) {
             if ($(this).is(":selected")) {
                 count = count + 1;
             }

         });

         if (count != $('.clickforselect option').length) {
             $('.clickforselect option').each(function(i, selected) {
                 if ($(this).val() == 0) {
                     $(this).attr("selected", false);
                 }
             });

         } else {
             $('.clickforselect option').each(function(i, selected) {
                 if ($(this).val() == 0) {
                     $(this).attr("selected", true);
                 }
             });

         }

         var foo = new Array();
         var idselected = new Array();


         $('.clickforselect :selected').each(function(i, selected) {

             foo.push($(selected).text());
             idselected.push($(selected).val())

         });


         $.each(idselected, function(a, b) {
             if (b == 0) {
                 foo = [];
                 idselected = [];
                 $('.clickforselect option').each(function(i, selected) {
                     if ($(this).val() != 0) {

                         foo.push($(selected).text());
                         idselected.push($(selected).val())
                     }
                 });

             }
         })
         $(".multiSel").val(foo);
         $(".oprid").val(idselected);




     }

     $scope.projecthealthonload = function() {
         Visualforce.remoting.Manager.invokeAction(
             '{!$RemoteAction.CtrPSOTable.getProjectHealth}',

             function(result, event) {

                 var daatjson = htmlDecode(result);
                 var parsedDaatjson = JSON.parse(daatjson);


                 $.each(parsedDaatjson.ReasonsLabelToValue, function(key, value) {
                     $(".projecthealthoption").append("<option value='" + key + "'>" + key + "</option>")
                     var projecthealth = new Array();
                     angular.forEach($scope.dataval.Customers, function(a, b) {

                         angular.forEach(a.Projects, function(an, b) {

                             projecthealth.push(an.ProjectStatus)
                         })
                     });

                     angular.forEach(projecthealth, function(a, b) {

                         $(".projecthealthoption").each(function(aprjb) {

                             if (parseInt(b) == parseInt(aprjb)) {
                                 if (a != "null") {
                                     $(this).find("option").each(function() {
                                         if ($(this).val() == a) {
                                             $(this).attr("selected", true);
                                         }
                                     })
                                 }
                             }
                         })

                     });

                 })



             }, {

             }
         )
     }
     $(document).on("focus", ".clickforselect ", function() {
         $scope.focusforchange = $(".oprid").val();

     })
     $scope.closefunctn = function() {

         $(".blurbackgrund,.imgldr").attr("style", "display:none");
     }

     $scope.oppselectedvalue = function() {


             var a = $(".oprid").val();
             sessionStorage.setItem("oppname", $(".oprid").val());
             var count = "";

             if (typeof $scope.focusforchange !== "undefined") {
                 count = a.localeCompare($scope.focusforchange);
                 $(".clickforselect").slideToggle('fast');
             } else {
                 count = 1;
             }

             $scope.date = $(".strtdateinput").val();

             var mnth = "";
             var datestring = ""
             if ($scope.date == "") {
                 var date = new Date()
                 mnth = parseInt(date.getMonth()) + 1;
                 datestring = date.getDate() + "." + mnth + "." + date.getFullYear();

             } else {
                 var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

                 var spltdatepicker = $scope.date.split(" ");

                 var mnth = "";
                 for (i = 0; i <= monthNames.length - 1; i++) {
                     if (monthNames[i] == spltdatepicker[0]) {
                         mnth = i;


                     }

                 }
                 mnth = parseInt(mnth) + 1;
                 datestring = "01." + mnth + "." + spltdatepicker[1];
             }




             if (count != 0) {
                 $(".blurbackgrund,.imgldr").attr("style", "display:block")

                 serviceforgetaccountchange(a, datestring).then(function(result) {




                     var daatjson = htmlDecode(result);
                     var resultobject = JSON.parse(daatjson);
                     if (resultobject.Customers.length > 0) {
                         $(".hdng").attr("style", "display:block");
                         $(".msg").attr("style", "display:none");
                         $scope.mainPage = tempService.inputbindingtable(resultobject);
                         $scope.dataval = resultobject;
                         $scope.focusdata = "";
                         universalobject = resultobject;
                         //code for template of binding input field of calender
                         var myDataSet1 = $scope.dataval1;

                         $scope.projecthealthonload();
                         //caculation for planned and unplanned days
                         $scope.calculationonload = function() {
                             angular.forEach($scope.dataval.Resources, function(resources, i) {
                                 angular.forEach(resources.Statistics, function(sttcs, i) {
                                     var strtdate = sttcs.StartDate;
                                     var enddate = sttcs.EndDate;
                                     var splitstrtdate = strtdate.split(".");
                                     var splitenddate = enddate.split(".");
                                     $(".enddateinput").val(splitenddate[0] + "-" + splitenddate[1] + "-" + splitenddate[2]);
                                     //differnce between startdate and end date starts
                                     var oneDay = 86400000; // hours*minutes*seconds*milliseconds
                                     var firstDate = new Date(splitenddate[2], parseInt(splitenddate[1]) - 1, splitenddate[0]);
                                     var secondDate = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
                                     var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
                                     var cmbne = splitenddate[1] + "-" + splitenddate[0] + "-" + splitenddate[2];
                                     var weekno = moment(cmbne, "MM-DD-YYYY").startOf('isoweek').week();
                                     //differnce between startdate and end date ends
                                     weekno = weekno;
                                     splitenddate[1] = parseInt(splitenddate[1]);

                                     if (diffDays == 6) {
                                         sttcs["Day"] = "Week";
                                         sttcs["wmno"] = weekno;
                                     } else if (diffDays < 7) {
                                         if (parseInt(splitenddate[0]) <= 6) {
                                             sttcs["Day"] = "Week";
                                             sttcs["wmno"] = weekno;

                                         } else {

                                             sttcs["Day"] = "MWeek";
                                             sttcs["wmno"] = weekno;
                                         }

                                     } else {
                                         sttcs["Day"] = "Month";
                                         sttcs["wmno"] = splitenddate[1];
                                     }

                                     var splitstt = sttcs.Days.split("/");
                                     var splitsttrev = sttcs.Revenue.split("/");
                                     if (parseFloat(splitstt[0]) == 0 && parseFloat(splitstt[1]) == 0) {
                                         sttcs.Days = "-/-"
                                     }
                                     if (parseFloat(splitsttrev[0]) == 0 && parseFloat(splitsttrev[1]) == 0) {
                                         sttcs.Revenue = "-/-"
                                     }
                                 });
                             });
                             var startdate = $scope.dataval.StartDate;
                             angular.forEach($scope.dataval.Customers, function(Customers, i) {
                                 angular.forEach(Customers.Projects, function(projectss, i) {
                                     angular.forEach(projectss.Resources, function(resurce, i) {
                                         resurce.PlannedDays = resurce.PlannedDays / 8;
                                         resurce.SoldDays = resurce.SoldDays / 8;
                                         if (resurce.SalesPrice == null) {
                                             resurce.SalesPrice = 0;
                                         }
                                         resurce.SalesPrice = parseFloat(resurce.SalesPrice).toFixed(2);
                                         $scope.unplannedindays = parseFloat(resurce.SoldDays) - parseFloat(resurce.PlannedDays);
                                         $scope.soldreven = parseFloat(resurce.SalesPrice) * parseFloat(resurce.SoldDays);
                                         $scope.plnndreven = parseFloat(resurce.SalesPrice) * parseFloat(resurce.PlannedDays);

                                         resurce.SalesPrice = euroconverter(resurce.SalesPrice);
                                         $scope.soldreven = euroconverter($scope.soldreven);
                                         $scope.plnndreven = euroconverter($scope.plnndreven);

                                         var localplanedformont1 = $scope.localobject(startdate, resurce.Staffing);

                                         resurce.plndperq = [];
                                         angular.forEach(resurce.MonthToLimitMap, function(mnthtolmt, key) {
                                             angular.forEach(localplanedformont1, function(lclplnd, plndkey) {
                                                 for (var key1 in lclplnd) {
                                                     var obj = {};
                                                     if (parseFloat(key) == parseFloat(key1)) {

                                                         obj[key] = (parseFloat(mnthtolmt) - parseFloat(lclplnd[key1])).toFixed(2);
                                                         resurce.plndperq.push(obj);
                                                     }
                                                 }
                                             });
                                         });

                                         resurce.PlannedDays = resurce.PlannedDays.toFixed(2).toString().replace(".", ",");
                                         resurce.SoldDays = resurce.SoldDays.toFixed(2).toString().replace(".", ",");
                                         $scope.unplannedindays = $scope.unplannedindays.toFixed(2);
                                         var ab = $scope.unplannedindays.toString();
                                         var soldrevstring = $scope.soldreven;
                                         var plnndrevstring = $scope.plnndreven;
                                         $scope.unplannedindays = ab.replace(".", ",");
                                         $scope.soldreven = soldrevstring //.replace(".", ",");
                                         $scope.plnndreven = plnndrevstring //.replace(".", ",");
                                         $scope.date = resurce.LastModifiedDate.split(" ");
                                         resurce.LastModifiedDate = $scope.date[0];
                                         resurce.unplanne = "" + $scope.unplannedindays + "";
                                         resurce.soldrev = "" + $scope.soldreven + "";
                                         resurce.plnndreven = "" + $scope.plnndreven + "";
                                         angular.forEach(resurce.Statistics, function(sttcs, i) {
                                             var strtdate = sttcs.StartDate;
                                             var enddate = sttcs.EndDate;
                                             var splitstrtdate = strtdate.split(".");
                                             var splitenddate = enddate.split(".");
                                             $(".enddateinput").val(splitenddate[0] + "-" + splitenddate[1] + "-" + splitenddate[2]);
                                             //differnce between startdate and end date starts
                                             var oneDay = 86400000; // hours*minutes*seconds*milliseconds
                                             var firstDate = new Date(splitenddate[2], parseInt(splitenddate[1]) - 1, splitenddate[0]);
                                             var secondDate = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
                                             var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
                                             var cmbne = splitenddate[1] + "-" + splitenddate[0] + "-" + splitenddate[2];
                                             var weekno = moment(cmbne, "MM-DD-YYYY").startOf('isoweek').week();
                                             //differnce between startdate and end date ends
                                             weekno = weekno;
                                             splitenddate[1] = parseInt(splitenddate[1]);

                                             if (diffDays == 6) {
                                                 sttcs["Day"] = "Week";
                                                 sttcs["wmno"] = weekno;
                                             } else if (diffDays < 7) {
                                                 if (parseInt(splitenddate[0]) <= 6) {
                                                     sttcs["Day"] = "Week";
                                                     sttcs["wmno"] = weekno;

                                                 } else {

                                                     sttcs["Day"] = "MWeek";
                                                     sttcs["wmno"] = weekno;
                                                 }

                                             } else {
                                                 sttcs["Day"] = "Month";
                                                 sttcs["wmno"] = splitenddate[1];
                                             }

                                             var splitstt = sttcs.Days.split("/");
                                             var splitsttrev = sttcs.Revenue.split("/");
                                             if (parseFloat(splitstt[0]) == 0 && parseFloat(splitstt[1]) == 0) {
                                                 sttcs.Days = "-/-"
                                             }
                                             if (parseFloat(splitsttrev[0]) == 0 && parseFloat(splitsttrev[1]) == 0) {
                                                 sttcs.Revenue = "-/-"
                                             }
                                         });
                                     })
                                 })
                             })
                         }
                         $scope.localobject = function(strtdate, objt) {
                             var startmonth = (strtdate).split(".");
                             var localplanedformont = [];
                             for (i = parseInt(startmonth[1]); i <= parseInt(startmonth[1]) + 2; i++) {
                                 var localplanedformontobj = {};
                                 var plnddayspermnth = 0;
                                 angular.forEach(objt, function(stff, key) {

                                     var dateformonthtolimit = (stff.Day).split(".");
                                     if (parseInt(dateformonthtolimit[1]) == i) {
                                         if (stff.Staff == "") {
                                             stff.Staff = 0;

                                         }
                                         plnddayspermnth = plnddayspermnth + parseFloat(stff.Staff) / 8;
                                     }

                                 })
                                 localplanedformontobj[i] = plnddayspermnth;
                                 localplanedformont.push(localplanedformontobj);
                             }
                             return localplanedformont;
                         }
                         $scope.calculationonload();
                         myDataSet = $scope.dataval.Customers;
                         startdateobj = $scope.dataval;

                         //Function for storing resource allocation value onfocus event
                         $scope.storevalue = function(val) {
                                 $scope.focusdata = val.currentTarget.value;
                                 $(val.target).attr("id", "" + $scope.focusdata + "");
                                 $scope.plannedorqa();
                             }
                             //datepicker click function

                         $scope.calculationandconvertion = function() {


                             angular.forEach(myDataSet, function(acc, b) {
                                 var customer = acc.AccountName;
                                 angular.forEach(acc.Projects, function(aprojects, b) {
                                     var trdata = ""
                                     var secondtable = ""
                                     var plandtotal = unplandtotal = rate = solddays = soldrev = plnndreven = 0;

                                     angular.forEach(aprojects.Resources, function(a, b) {
                                         var plnd = (a.PlannedDays).toString().replace(",", ".");
                                         var unplnddot = (a.unplanne).toString().replace(",", ".");
                                         plandtotal = plandtotal + parseFloat(plnd);
                                         unplandtotal = unplandtotal + parseFloat(unplnddot);
                                         var fltsalesprice = '';

                                         if ((a.SalesPrice).indexOf(".") > 0) {
                                             fltsalesprice = a.SalesPrice.replace(",", ".");
                                             fltsalesprice = fltsalesprice.replace(".", "");
                                         } else {
                                             fltsalesprice = a.SalesPrice.replace(",", ".");
                                         }
                                         rate = rate + parseFloat(fltsalesprice);

                                         var solddays1 = a.SoldDays;
                                         var splitsoldDays = solddays1.toString().replace(",", ".");
                                         var cmbine = parseFloat(splitsoldDays);
                                         solddays = solddays + cmbine;
                                         var fltsoldrev = "";
                                         if ((a.soldrev).indexOf(".") > 0) {
                                             fltsoldrev = a.soldrev.replace(",", ".");
                                             fltsoldrev = fltsoldrev.replace(".", "");

                                         } else {
                                             fltsoldrev = a.soldrev.replace(",", ".");
                                         }

                                         soldrev = soldrev + parseFloat(fltsoldrev);

                                         var fltplndrev = "";
                                         if ((a.plnndreven).indexOf(".") > 0) {
                                             fltplndrev = a.plnndreven.replace(",", ".");
                                             fltplndrev = fltplndrev.replace(".", "");

                                         } else {
                                             fltplndrev = a.plnndreven.replace(",", ".");
                                         }


                                         plnndreven = plnndreven + parseFloat(fltplndrev);
                                     });

                                     soldrev = soldrev.toFixed(2);
                                     var eurosoliddays = euroconverter(solddays);
                                     plandtotal = parseFloat(plandtotal).toFixed(2);
                                     unplandtotal = parseFloat(unplandtotal).toFixed(2)
                                     plandtotal = plandtotal.toString().replace(".", ",");
                                     unplandtotal = unplandtotal.toString().replace(".", ",");
                                     var latetmodef = soldrev - plnndreven;
                                     rate = euroconverter(rate);
                                     soldrev = euroconverter(soldrev);
                                     plnndreven = euroconverter(plnndreven);
                                     latetmodef = latetmodef.toFixed(2).toString().replace(".", ",");
                                     trdata = "<tr class='totalplannedandun'><td>Totals</td><td></td><td>" + eurosoliddays + "</td><td>" + plandtotal + "</td><td>" + unplandtotal + "</td></tr>";
                                     secondtable = "<tr class='totalforcalndr' style='min-width:72px;'><td></td><td style='height:19px;min-width:72px;max-width:72px;'>" + soldrev + "</td><td style='min-width:72px;max-width:72px;'>" + plnndreven + "</td><td></td></tr>"
                                     $(".prjname").each(function() {
                                         if ($(this).parent().prev().find(".customername").text() == customer && $(this).text() == aprojects.OpportunityName) {
                                             $(this).parent().parent().parent().next().find(".table1 .totalscalc").append(trdata);
                                             $(this).parent().parent().parent().next().find(".inputbdy").append(secondtable);
                                         }
                                     })
                                 });
                             });
                         }
                         $scope.disablinginputs = function() {
                                 var disableprevmonth = new Date();

                                 var now = new Date();
                                 var hour = now.getUTCHours() + 2;
                                 var minutes = now.getUTCMinutes();
                                 var seconds = now.getUTCSeconds();



                                 var month = parseInt(now.getUTCMonth()) + 1;
                                 var date = now.getUTCDate();
                                 var year = now.getUTCFullYear();
                                 $(".inputfields").each(function() {
                                         var inputsplit = ($(this).attr("name")).split(".");
                                         if (parseInt(inputsplit[1]) < month) {
                                             $(this).attr("disabled", "true");
                                         }
                                     })
                                     //every sunday from 4 AM Germany time previous week's data needs to be uneditable

                                 var dayforjson = now.getUTCDay();
                                 if (parseInt(hour) > 4 && parseInt(minutes) > 0 && parseInt(seconds) > 0) {

                                     $(".inputfields").each(function() {
                                         var inputsplit = ($(this).attr("name")).split(".");
                                         var dayforweek = parseInt(dayforjson) - 1;
                                         if (parseInt(inputsplit[2]) <= parseInt(year) && parseInt(inputsplit[1]) <= parseInt(month) && ((parseInt(inputsplit[0]) < parseInt(date) - dayforweek))) {

                                             $(this).attr("disabled", "true");
                                         }
                                     })
                                 }

                                 $(".totalforcalndr").each(function() {
                                     $(this).find("td").each(function(co) {
                                         if (co > 3 && co < 4) {
                                             $(this).remove();
                                         }
                                     })
                                 })
                             }
                             //Calculation of planned and unplanned hours and blur events starts here
                             //logic to display popups for various scenerios like N/A and over allocation
                         $scope.plannedCalculation = function(a, b, c, d, g) {
                                 if (typeof a !== "undefined") {
                                     var currentvalue = a.currentTarget.value;
                                     var numbervalidation = new RegExp("^([0-9\.]{0,})$");
                                     if (!numbervalidation.test(currentvalue)) {
                                         a.currentTarget.value = "";

                                     }
                                     if ((currentvalue / 0.25).toString().indexOf(".") > 0) {
                                         $(".appendtxt").text("Value entered " + currentvalue + " is not divisible by 0.25 hours, please enter a value which is divisible by 0.25 hours(15 minutes).For example: 3.0 or 3.25 or 3.5 or 3.75 are valid numbers.");
                                         $(".blurbackgrund,.popup").attr("style", "display:block");
                                         $(".appndbtns").html(" ");
                                         $(".appndbtns").html("<input type='button' value='OK' class='cancelbtn'>");
                                         $(a.target).addClass('cancelfun');
                                         cancelclick = 0;
                                         return false;
                                     }

                                     var cmbineprnt = b + "/" + c + "/" + d;
                                     var totalhours = "";
                                     $scope.ResourceName = $scope.dataval.Customers[b].Projects[c].Resources[d].ResourceName;
                                     var dateofinput = g.split(".");
                                     var newdatefordate = new Date(dateofinput[0], dateofinput[1] - 1, dateofinput[2]);
                                     var resourceavialblty = $scope.dataval.Resources;
                                     var date = g.split(".");
                                     var cmbinedate = date[0] + "." + date[1] + "." + date[2];
                                     if (a.currentTarget.value == "") {
                                         var resurcestffng = $scope.dataval.Customers[b].Projects[c];
                                         angular.forEach(resurcestffng.Resources, function(resource, i) {
                                             var count = 0;
                                             if (resource.ResourceName == $scope.ResourceName) {
                                                 angular.forEach(resource.Staffing, function(Staffingdata, i) {
                                                     var Staffingdate = Staffingdata.Day.split(".");
                                                     var newdateinput1 = new Date(dateofinput[0], dateofinput[1], dateofinput[2]);
                                                     var jsonnewdate1 = new Date(Staffingdate[0], Staffingdate[1], Staffingdate[2]);
                                                     if (newdateinput1.getFullYear() == jsonnewdate1.getFullYear() && newdateinput1.getMonth() == jsonnewdate1.getMonth() && newdateinput1.getDate() == jsonnewdate1.getDate()) {
                                                         Staffingdata.Staff = "";
                                                     }
                                                 })
                                                 if (count != 1) {
                                                     if (dataforna != 1) {
                                                         if (currentvalue != "") {
                                                             resource.Staffing.push({
                                                                 "Day": cmbinedate,
                                                                 "SpecialOccasion": "true",
                                                                 "Staff": currentvalue
                                                             });
                                                             count = dataforna = 0;
                                                         }
                                                     }
                                                 }
                                             }
                                         });
                                     }
                                     var rsultdata = validateMonthToLimitOnResourceAllocation($scope.dataval.Customers[b].Projects[c].Resources[d], parseInt(moment(cmbinedate, "DD.MM.YYYY").month()) + 1, a);
                                     if (rsultdata == 1) {
                                         return false;
                                     }
                                     //validation for more than 12hrs
                                     if (parseFloat(a.currentTarget.value) > 8 && parseFloat(a.currentTarget.value) <= 12) {
                                         $(a.target).addClass('cancelfun');
                                         $(".appendtxt").text("This is " + a.currentTarget.value + " hours for this day");
                                         $(".blurbackgrund,.popup").attr("style", "display:block");
                                         $(".appndbtns").html("<input type='button' value='Confirm' class='cnfrmbtn' ng-click='functionnot(" + a.currentTarget.value + "," + cmbineprnt + "," + g + "," + totalhours + "," + $(a.target).attr("id") + ")'><input type='button' value='Cancel' class='cancelbtn'>");
                                         $(a.target).addClass('cancelfun');
                                         cancelclick = 0;
                                     } else if (parseFloat(a.currentTarget.value) > 12) {
                                         $(".appendtxt").text("This is exceeding more than 12 hours for this day");
                                         $(".blurbackgrund,.popup").attr("style", "display:block");
                                         $(".appndbtns").html(" ");
                                         $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
                                         $(a.target).addClass('cancelfun');
                                         cancelclick = 0;
                                         return false;
                                     }
                                     if (parseFloat(a.currentTarget.value) == 0) {
                                         a.currentTarget.value = "";
                                     }
                                     angular.forEach(resourceavialblty, function(resa, resb) {
                                         var resrceavltyobj = resa.ResourceName;
                                         if (resrceavltyobj == $scope.ResourceName) {
                                             if (resa.Staffing != "") {
                                                 angular.forEach(resa.Staffing, function(resstfnga, restaggngb) {
                                                     var dateofresourcetable = resstfnga.Day;
                                                     var dateofresourcetable = dateofresourcetable.split(".");
                                                     var newdateforresoucetable = new Date(dateofresourcetable[0], dateofresourcetable[1] - 1, dateofresourcetable[2]);
                                                     if (newdateforresoucetable.getFullYear() == newdatefordate.getFullYear() && newdateforresoucetable.getMonth() == newdatefordate.getMonth() && newdateforresoucetable.getDate() == newdatefordate.getDate()) {
                                                         if (a.currentTarget.value != "") {
                                                             if (rsultdata == 1) {
                                                                 return false;
                                                             } else if (resstfnga.HoursOff == 8) {
                                                                 $(".appendtxt").text(" ");
                                                                 $(".appendtxt").text("This Resource is not available at this day");
                                                                 $(".blurbackgrund,.popup").attr("style", "display:block");
                                                                 $(".appndbtns").html(" ");
                                                                 $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
                                                                 $(a.target).addClass('cancelfun');
                                                                 cancelclick = 0;
                                                             } else if (resstfnga.Staff == "N/A") {
                                                                 a.currentTarget.value = "";
                                                                 $(".appendtxt").text("This Resource is not available at this day");
                                                                 $(".blurbackgrund,.popup").attr("style", "display:block");
                                                                 $(".appndbtns").html("<input type='button' value='Ok' class='closebtn'>")
                                                                 dataforna = 1;
                                                             } else if (parseFloat(resstfnga.Staff) + parseFloat(a.currentTarget.value) > 8) {
                                                                 $(a.target).addClass('cancelfun');
                                                                 if ($scope.focusdata != "") {
                                                                     var recal = $scope.focusdata - parseFloat(a.currentTarget.value);
                                                                     var data = parseFloat(resstfnga.Staff) - recal
                                                                     totalhours = data;
                                                                 } else {
                                                                     var hoyrssum = parseFloat(resstfnga.Staff) + parseFloat(a.currentTarget.value);
                                                                     totalhours = hoyrssum.toFixed(2);
                                                                 }
                                                                 if (totalhours > 8) {
                                                                     $(a.target).addClass('cancelfun');
                                                                     $(".appendtxt").text("This is " + totalhours + " hours for this day");
                                                                     $(".blurbackgrund,.popup").attr("style", "display:block");
                                                                     $(".appndbtns").html("<input type='button' value='Confirm' class='cnfrmbtn' ng-click='functionnot(" + a.currentTarget.value + "," + cmbineprnt + "," + g + "," + totalhours + "," + $(a.target).attr("id") + ")'><input type='button' value='Cancel' class='cancelbtn'>");
                                                                     $(a.target).addClass('cancelfun');
                                                                     cancelclick = 0;
                                                                 }
                                                                 if (totalhours > 12) {
                                                                     $(a.target).addClass('cancelfun');
                                                                     $(".appendtxt").text("This is " + totalhours + " hours for this day");
                                                                     $(".blurbackgrund,.popup").attr("style", "display:block");
                                                                     $(".appndbtns").html(" ");
                                                                     $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
                                                                     $(a.target).addClass('cancelfun');
                                                                     cancelclick = 0;
                                                                 }
                                                             } else {
                                                                 var date = g.split(".");
                                                                 var cmbinedate = date[0] + "." + date[1] + "." + date[2];
                                                                 validateMonthToLimitOnResourceAllocation($scope.dataval.Customers[b].Projects[c].Resources[d], parseInt(moment(cmbinedate, "DD.MM.YYYY").month()) + 1, a);
                                                             }
                                                         }
                                                     }
                                                 });
                                             }
                                         }
                                     })
                                     $(a.target).removeClass('greencolor greycolor redcolor nacolor white');
                                     $scope.settingcolor(a);
                                     //Validating input data entered using regular expression

                                     if (parseFloat(currentvalue) == 0) {
                                         a.currentTarget.value = "";

                                     }
                                     if (totalhours == "") {
                                         totalhours = a.currentTarget.value;
                                     }
                                     var j = ""
                                     $scope.resourceplanningcalc(a, cmbineprnt, g, totalhours, j)
                                 }
                             }
                             //color coding uneversial function starts here
                         $scope.settingcolor = function(a) {

                             if (parseFloat(a.currentTarget.value) == 8) {
                                 $(a.target).addClass('greencolor');
                             } else if (parseFloat(a.currentTarget.value) < 8) {
                                 $(a.target).addClass('greycolor');
                             } else if (parseFloat(a.currentTarget.value) > 8) {
                                 $(a.target).addClass('redcolor');
                             } else if (a.currentTarget.value == "N/A") {
                                 $(a.target).addClass('nacolor');
                             }
                         }

                         //color coding uneversial function ends here
                         //function to use for plannngcaculation starts here
                         $scope.resourceplanningcalc = function(a, cmbineprnt, g, h, j) {
                             var cmbineparentsplit = cmbineprnt.split("/");
                             var b = cmbineparentsplit[0];
                             var c = cmbineparentsplit[1];
                             var d = cmbineparentsplit[2];
                             var currentvalue = "";
                             if (typeof a === "string") {
                                 currentvalue = a;
                                 $scope.focusdata = j;
                             } else {
                                 currentvalue = a.currentTarget.value;
                             }

                             var uncal = 0;
                             if (cancelclick != 0) {
                                 if ($scope.focusdata != "") {
                                     var datanull;
                                     if (currentvalue == "") {
                                         datanull = 0
                                     } else {
                                         datanull = currentvalue;
                                     }
                                     uncal = parseFloat(datanull) - parseFloat($scope.focusdata);
                                 } else {
                                     var dataforelse = currentvalue;
                                     if (currentvalue == "") {
                                         dataforelse = 0;
                                     }
                                     uncal = parseFloat(dataforelse);
                                     if (j != "") {
                                         uncal = parseFloat(currentvalue) - parseFloat(j);
                                     }
                                 }

                                 var calclateperhour = uncal / 8;

                                 //logic to calculate planned value for given resource
                                 $scope.plannedscope = $scope.dataval.Customers[b].Projects[c].Resources[d].PlannedDays.replace(",", ".");
                                 var spltpannd = parseFloat($scope.plannedscope) + calclateperhour;
                                 $scope.unplannedscope = $scope.dataval.Customers[b].Projects[c].Resources[d].unplanne.replace(",", ".");
                                 $scope.monthtolimit = $scope.dataval.Customers[b].Projects[c].Resources[d].MonthToLimitMap;
                                 $scope.dataval.Customers[b].Projects[c].Resources[d].plndperq = [];




                                 //logic to calculate unplanned value for given resource
                                 var spltunplanneddays = parseFloat($scope.unplannedscope) - calclateperhour;
                                 spltpannd = spltpannd.toFixed(2);
                                 var spltdataaftrdot = spltpannd.split(".")

                                 if (parseFloat(spltdataaftrdot[1]) <= 1) {
                                     spltdataaftrdot[1] = "00";
                                     spltpannd = spltdataaftrdot[0] + "." + spltdataaftrdot[1];
                                 }
                                 spltpannd = spltpannd.toString().replace(".", ",");
                                 spltunplanneddays = spltunplanneddays.toFixed(2);
                                 var spltdataaftrdotun = spltunplanneddays.split(".");

                                 if (parseFloat(spltdataaftrdotun[1]) <= 1) {
                                     spltdataaftrdotun[1] = "00";
                                     spltunplanneddays = spltdataaftrdotun[0] + "." + spltdataaftrdotun[1];
                                 }
                                 spltunplanneddays = spltunplanneddays.toString().replace(".", ",");
                                 $scope.dataval.Customers[b].Projects[c].Resources[d].PlannedDays = spltpannd;
                                 $scope.dataval.Customers[b].Projects[c].Resources[d].unplanne = spltunplanneddays;
                                 $scope.ResourceName = $scope.dataval.Customers[b].Projects[c].Resources[d].ResourceName;
                                 var scopesolddays = $scope.dataval.Customers[b].Projects[c].Resources[d].SoldDays.replace(",", ".");
                                 var scopesalesprice = $scope.dataval.Customers[b].Projects[c].Resources[d].SalesPrice; //.replace(",", ".");
                                 spltpannd = spltpannd.replace(",", ".");
                                 $scope.unplannedindays = parseFloat(scopesolddays) - parseFloat($scope.plannedscope);
                                 $scope.soldreven = parseFloat(scopesalesprice) * parseFloat(scopesolddays);
                                 var fltsalesprice = '';

                                 if ((scopesalesprice).indexOf(".") > 0) {
                                     fltsalesprice = scopesalesprice.replace(",", ".");
                                     fltsalesprice = fltsalesprice.replace(".", "");
                                 } else {
                                     fltsalesprice = scopesalesprice.replace(",", ".");
                                 }

                                 $scope.plnndreven = parseFloat(fltsalesprice) * parseFloat(spltpannd);

                                 $scope.dataval.Customers[b].Projects[c].Resources[d].plnndreven = euroconverter($scope.plnndreven);
                                 if (clickedfoedata == 1) {
                                     $scope.$apply();
                                     clickedfoedata = 0;

                                 }



                                 //logic to populate allocation in resource allocation table
                                 var date = g.split(".");
                                 var cmbinedate = date[0] + "." + date[1] + "." + date[2];
                                 var resurcestffng = $scope.dataval.Customers[b].Projects[c];
                                 angular.forEach(resurcestffng.Resources, function(resource, i) {
                                     var count = 0;
                                     if (resource.ResourceName == $scope.ResourceName) {
                                         angular.forEach(resource.Staffing, function(Staffingdata, i) {
                                             var Staffingdate = Staffingdata.Day.split(".");
                                             var newdateinput1 = new Date(date[0], date[1], date[2]);
                                             var jsonnewdate1 = new Date(Staffingdate[0], Staffingdate[1], Staffingdate[2]);
                                             if (newdateinput1.getFullYear() == jsonnewdate1.getFullYear() && newdateinput1.getMonth() == jsonnewdate1.getMonth() && newdateinput1.getDate() == jsonnewdate1.getDate()) {
                                                 Staffingdata.Staff = "";
                                             }
                                         })
                                     }
                                 });
                                 $scope.dataval.Customers[b].Projects[c].Resources[d].Staffing.push({
                                     "Day": cmbinedate,
                                     "Staff": currentvalue
                                 });
                                 var localplanedformont1 = $scope.localobject($scope.dataval.StartDate, $scope.dataval.Customers[b].Projects[c].Resources[d].Staffing);



                                 angular.forEach($scope.monthtolimit, function(mnthtolmt, key) {
                                     angular.forEach(localplanedformont1, function(lclplnd, plndkey) {
                                         for (var key1 in lclplnd) {
                                             var obj = {};
                                             if (parseFloat(key) == parseFloat(key1)) {

                                                 obj[key] = (parseFloat(mnthtolmt) - parseFloat(lclplnd[key1])).toFixed(2);
                                                 $scope.dataval.Customers[b].Projects[c].Resources[d].plndperq.push(obj);
                                             }
                                         }
                                     });
                                 });

                             }
                             if (cancelclick != 0) {
                                 $(".totalforcalndr").remove();
                                 $(".totalforcalndr,.totalplannedandun").each(function(no) {
                                     $(this).find("td").each(function(no1) {
                                         $(this).remove();
                                     });
                                 });
                                 $scope.calculationandconvertion();

                                 totalcaluculation();

                                 var value;
                                 if (currentvalue == "") {
                                     value = 0;

                                 } else {
                                     value = parseFloat(currentvalue);
                                 }
                                 var date = cmbinedate;
                                 var cmbinedataformnth = cmbinedate.split(".");
                                 var objctformnth = $scope.dataval.Customers[b].Projects[c].Resources[d].MonthToOppLineItemIdMap;
                                 var mnthtolmt;
                                 for (var key in objctformnth) {
                                     if (cmbinedataformnth[1] == key) {
                                         mnthtolmt = objctformnth[key];
                                     }
                                 }


                                 $(".cancelfun").removeClass("cancelfun");
                                 Visualforce.remoting.Manager.invokeAction(
                                     '{!$RemoteAction.CtrPSOTable.savefunction}',
                                     mnthtolmt, date, value,
                                     function(result, event) {
                                         if (!result.IsSuccess) {
                                             $(".appendtxt").text(" ");
                                             $(".appendtxt").append(result.ErrorMessage)
                                             $(".popup,.blurbackgrund").attr("style", "display:block");
                                             angular.element($(".appndbtns")).html(" ");
                                             angular.element($(".appndbtns")).append($compile("<input type='button' value='OK' class='' ng-click='saveerror()'>")($scope));
                                             $(a.target).addClass('cancelfun');
                                         }


                                     }, {

                                         escape: true
                                     }
                                 );

                             }
                         }

                         $scope.plannedorqa = function() {


                             $(".plnnedperq").each(function() {
                                 var jsondata1 = $(this).text();
                                 if (jsondata1 != "[]" && jsondata1 != "") {
                                     var th = $(this);
                                     var jsonstrngfy = JSON.parse(jsondata1);
                                     angular.forEach(jsonstrngfy, function(monthtofind, i) {
                                         angular.forEach(monthtofind, function(valueofmonth, i) {

                                             $(th).parent().find(".plnperhur").each(function() {
                                                 var newdateinput = $(this).attr("name");

                                                 if (parseInt(i) == parseInt(newdateinput) - 1) {
                                                     $(this).val(valueofmonth);
                                                     if (parseFloat(valueofmonth) < 0) {
                                                         $(this).removeClass('greencolor greycolor redcolor nacolor white');
                                                         $(this).addClass("redcolor");


                                                     } else {

                                                         $(this).removeClass('greencolor greycolor redcolor nacolor white');
                                                     }
                                                 }
                                             });
                                         });
                                     });

                                 }
                             })
                         }

                         $scope.Statatical = function() {

                             $(".statical").each(function() {
                                 var jsondata = $(this).text();
                                 if (jsondata != "[]" && jsondata != "") {
                                     var th = $(this);
                                     var jsonstrngfy = JSON.parse(jsondata);
                                     $.each(jsonstrngfy, function(a, b) {

                                         $(th).parent().find(".mwdrdot").each(function() {
                                             var newdateinput = $(this).attr("name");
                                             if (b.Day == "MWeek") {
                                                 if (parseInt(b.wmno) == parseInt(newdateinput)) {
                                                     $(this).val(b.Days);
                                                 }
                                             }
                                         });
                                         $(th).parent().find(".mwdadot").each(function() {
                                             var newdateinput = $(this).attr("name");
                                             if (b.Day == "MWeek") {
                                                 if (parseInt(b.wmno) == parseInt(newdateinput)) {
                                                     $(this).val(b.Revenue);
                                                 }
                                             }
                                         });
                                         $(th).parent().find(".drdot").each(function() {
                                             var newdateinput = $(this).attr("name");
                                             if (b.Day == "Week") {
                                                 if (parseInt(b.wmno) == parseInt(newdateinput)) {
                                                     $(this).val(b.Days);
                                                 }
                                             }
                                         });
                                         $(th).parent().find(".dadot").each(function() {
                                             var newdateinput = $(this).attr("name");
                                             if (b.Day == "Week") {
                                                 if (parseInt(b.wmno) == parseInt(newdateinput)) {
                                                     $(this).val(b.Revenue);
                                                 }
                                             }
                                         })
                                         $(th).parent().find(".mdadot").each(function() {
                                             var newdateinput = $(this).attr("name");
                                             if (b.Day == "Month") {
                                                 if (parseInt(b.wmno) == parseInt(newdateinput) - 1) {
                                                     $(this).val(b.Revenue);
                                                 }
                                             }
                                         })
                                         $(th).parent().find(".mdrdot").each(function() {
                                             var newdateinput = $(this).attr("name");
                                             if (b.Day == "Month") {
                                                 if (parseInt(b.wmno) == parseInt(newdateinput) - 1) {
                                                     $(this).val(b.Days);
                                                 }
                                             }
                                         })
                                     })
                                 }
                                 $(".drdot,.dadot,.mdrdot,.mdadot,.mwdrdot,.mwdadot").each(function() {
                                     if ($(this).val() == "") {
                                         $(this).val("-/-");
                                     }
                                 })
                             })
                         }


                         //function for populating Staffing array in inputs
                         $scope.Staffingpopltion = function() {
                             $(".Staffing").each(function() {
                                 var jsondata = $(this).text();
                                 if (jsondata != "[]") {
                                     var th = $(this);
                                     var jsonstrngfy = JSON.parse(jsondata);
                                     $.each(jsonstrngfy, function(a, b) {
                                         $(th).parent().find(".inputfields").each(function() {
                                             var newdateinput = $(this).attr("name");
                                             var splitnewdateinput = newdateinput.split(".");
                                             var combinenewdateinput = splitnewdateinput[0] + "-" + splitnewdateinput[1] + "-" + splitnewdateinput[2];
                                             var jsonnewdate = b.Day;
                                             var splitjsonnewdate = jsonnewdate.split(".");
                                             var combinejsonnewdate = splitjsonnewdate[0] + "-" + splitjsonnewdate[1] + "-" + splitjsonnewdate[2];
                                             var newdateinput1 = new Date(splitnewdateinput[0], parseInt(splitnewdateinput[1]) - 1, splitnewdateinput[2]);
                                             var jsonnewdate1 = new Date(splitjsonnewdate[0], parseInt(splitjsonnewdate[1]) - 1, splitjsonnewdate[2]);
                                             if (newdateinput1.getFullYear() == jsonnewdate1.getFullYear() && newdateinput1.getMonth() == jsonnewdate1.getMonth() && newdateinput1.getDate() == jsonnewdate1.getDate()) {
                                                 $(this).removeClass('greencolor greycolor redcolor nacolor white');
                                                 if (parseFloat(b.Staff) == 0) {
                                                     b.Staff = "";
                                                 }



                                                 $(this).val(b.Staff);

                                                 if (parseFloat(b.HoursOff) == parseFloat(b.Staff)) {
                                                     $(this).attr("disabled", "true");
                                                     $(this).addClass("holiday");
                                                 } else
                                                 if (parseFloat(b.Staff) == 8) {
                                                     $(this).addClass("greencolor");
                                                 } else if (parseFloat(b.Staff) < 8) {
                                                     $(this).addClass("greycolor");
                                                 } else if (parseFloat(b.Staff) > 8) {
                                                     $(this).addClass("redcolor");
                                                 } else if (b.Staff == "N/A") {
                                                     $(this).addClass("nacolor");
                                                 }
                                             }
                                         })
                                     })
                                 }
                             })
                         }

                     } else {
                         $(".imgldr").attr("style", "display:none;");
                         $(".appendtxt").text(" ");
                         $(".appendtxt").append("No results are available for the filtering.")
                         $(".popup,.blurbackgrund").attr("style", "display:block");
                         $(".appndbtns").html("<input type='button' value='OK' class='cancelbtn' >");

                     }

                 });

             }

         }
         //)
     $scope.$on('ngRepeatFinishedforselectbox', function(ngRepeatFinishedEvent) {
         $scope.oppvalue = sessionStorage.getItem("oppname");
         var datatodsply = new Array();
         var datadsplyopp = new Array();

         if ($scope.oppvalue != "") {
             var oppvalusplite = $scope.oppvalue.split(",");
             for (i = 0; i <= oppvalusplite.length - 1; i++) {



                 $(".clickforselect option").each(function() {

                     if ($(this).val() == oppvalusplite[i]) {

                         $(this).attr("selected", true);
                         datatodsply.push($(this).text());


                     }

                 })

             }
         }
         $scope.accountname = sessionStorage.getItem("accname");
         if ($scope.accountname != "") {
             $scope.accountnamesplit = $scope.accountname.split(",");
             for (i = 0; i <= $scope.accountnamesplit.length - 1; i++) {



                 $(".accountname  option").each(function() {

                     if ($(this).val() == $scope.accountnamesplit[i]) {

                         $(this).attr("selected", true);
                         datadsplyopp.push($(this).text());
                     }

                 })

             }
         }

         $(".Accountnamedsp").val(datadsplyopp);
         $(".multiSel").val(datatodsply);
     });
     $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {

             $scope.calculationandconvertion();
             $scope.headerpop = function() {
                 var strtdate = startdateobj.StartDate;
                 var enddate = startdateobj.EndDate;

                 var inputsplit = strtdate.split(".");
                 var splitstrtdate = strtdate.split(".");
                 var splitenddate = enddate.split(".");
                 $(".enddateinput").val(splitenddate[0] + "-" + splitenddate[1] + "-" + splitenddate[2]);
                 //differnce between startdate and end date starts
                 var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
                 var firstDate = new Date(splitenddate[2], parseInt(splitenddate[1]) - 1, splitenddate[0]);
                 var secondDate = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
                 var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
                 //differnce between startdate and end date ends
                 var date = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
                 var date1 = new Date(splitenddate[2], parseInt(splitenddate[1]) - 1, splitenddate[0]);
                 var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                 $(".strtdateinput").val(monthNames[parseInt(inputsplit[1]) - 1] + " " + inputsplit[2]);
                 var date = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
                 var heade;
                 var tableheade = "";
                 var day = date.getDay();
                 var date1 = parseInt(date.getDate());
                 var year = parseInt(date.getFullYear());
                 var month = parseInt(date.getMonth()) + 1;
                 if (day == 0) {
                     day = 7;
                 }
                 var k = parseInt(day);
                 var lp = leapYear(year);
                 var dt;
                 dt = date1;
                 for (j = 0; j <= parseInt(diffDays); j++) {
                     if (month == 2) {
                         if (lp) {
                             if (dt == 30) {
                                 dt = 1;
                                 month = month + 1;
                             }
                         } else {
                             if (dt == 29) {
                                 dt = 1;
                                 month = month + 1;
                             }
                         }
                     }
                     if (month == 4 || month == 6 || month == 9 || month == 11) {
                         if (dt == 31) {
                             dt = 1;
                             month = month + 1;
                         }
                     }
                     if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
                         if (month == 12) {
                             if (dt == 32) {
                                 dt = 1;
                                 month = 1;
                                 year = year + 1;
                             }
                         } else if (dt == 32) {
                             dt = 1;
                             month = month + 1;
                         }
                     }
                     var cmbne = month + "-" + dt + "-" + year;
                     var weekno = moment(cmbne, "MM-DD-YYYY").startOf('isoweek').week();
                     if (j == 0) {
                         if (k <= 4 || k == 7) {
                             if (weekdays[k] == "SU") {
                                 if (dt == 1) {
                                     heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;' class='weekhead' ><span class='emptyclass'>" + monthNames[month - 1] + "</span><br/><span class='spanbirder' style='padding: 0% 6px 0 6px !important;border-right:1px solid #B8B1B1;'>KW-" + weekno + "</span><br/><span style='border-right:1px solid #B8B1B1;padding:0px 12px 0px 12px;'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th>";
                                 } else {
                                     heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;' class='weekhead' ><span class='emptyclass'></span></br><span class='spanbirder' style='padding: 0% 3px 0 3px !important;border-right:1px solid #B8B1B1;'>KW-" + weekno + "</span><br/><span style='border-right:1px solid #B8B1B1;padding:0px 9px 0px 9px;'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th>";
                                 }
                             } else {
                                 if (dt == 1) {
                                     heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;' class='weekhead' ><span class='emptyclass'>" + monthNames[month - 1] + "</span><br/><span class='spanbirder' style='padding: 0% 3px 0 3px !important;'>KW-" + weekno + "</span><br/><span >" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                                 } else {
                                     heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;' class='weekhead' ><span class='emptyclass'></span></br><span class='spanbirder' style='padding: 0% 3px 0 3px !important;'>KW-" + weekno + "</span><br/><span >" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                                 }
                             }
                         } else {
                             if (dt == 1) {
                                 heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;' class='weekhead' ><span class='emptyclass'>" + monthNames[month - 1] + "</span><br/><span class='spanbirder' style='padding: 0% 3px 0 3px !important;border-right:1px solid #B8B1B1;'>KW-" + weekno + "</span><br/><span style='border-right:1px solid #B8B1B1;padding:0px 12px 0px 12px;'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                             }
                         }
                     } else if (j == parseInt(diffDays)) {
                         heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;' class='weekhead' ><br/><span class='spanbirder' style='padding: 0% 3px 0 3px !important;'>KW-" + weekno + "</span><br/><span >" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>S.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th>";
                     } else if (weekdays[k] == "MO") {
                         if (dt == 1) {
                             heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>S.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border:0;' class='weekhead' ><span class='emptyclass' style='border-bottom: 1px solid #B8B1B1;padding: 0px 6px 0px 0px;'>" + monthNames[month - 1] + "</span><span class='spanbirder' style='padding: 0px;'></span><br/><br/><span class='brdrdtls' style='  border-top: 1px solid #B8B1B1;padding: 0px 2px 0px 4px;'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                         } else {
                             heade = heade + "<th style='text-align:center;border:0;' class='weekhead' ><span class='emptyclass'></span></br><span class='spanbirder'></span><br/><span class='brdrdtls' >" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                         }
                     } else if (weekdays[k] == "WE") {
                         if (dt == 1) {
                             heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>S.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:left;border:none;' class='weekhead' ><span class='emptyclass'>" + monthNames[month - 1] + "</span><br/><span class='spanbirder' style='padding: 0 0px 0 0px;'>KW-" + weekno + "</span><br/><span class='wd'>" + weekdays[k] + '<br/><span class="wd1">' + dt + "</span></th>";
                         } else {
                             heade = heade + "<th style='text-align:left;border:none;' class='weekhead' ><span class='emptyclass'></span></br><span class='spanbirder' style='padding: 0 0px 0 0px;'>KW-" + weekno + "</span><br/><span class='wd'>" + weekdays[k] + '<br/><span class="wd1">' + dt + "</span></th>";
                         }
                     } else if (weekdays[k] == "SU") {
                         if (dt == 1) {
                             heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>S.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border:0;' class='weekhead' ><span class='emptyclass' style='border-bottom: 1px solid #B8B1B1;padding: 0px 6px 0px 0px;'>" + monthNames[month - 1] + "</span><span class='spanbirder' style='padding: 0px;'></span><br/><br/><span class='brdrdtls' style='  border-top: 1px solid #B8B1B1;padding: 0px 2px 0px 4px;'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th>";
                         } else {
                             heade = heade + "<th style='text-align:center;border:0;' class='weekhead' ><span class='emptyclass'></span></br><span class='spanbirder' style='border-right:1px solid #B8B1B1;'></span><br/><span class='brdrdtls' >" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th>";
                         }
                     } else {
                         if (dt == 1) {
                             heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>S.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:left;border:none;' class='weekhead' ><span class='emptyclass'>" + monthNames[month - 1] + "</span><br/><span class='spanbirder'></span><br/><span class='brdrdtls'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                         } else {
                             heade = heade + "<th style='text-align:left;border:none;' class='weekhead' ><span class='emptyclass'></span></br><span class='spanbirder'></span><br/><span class='brdrdtls'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                         }
                     }
                     tableheade = tableheade + "<p style='float:left;'>" + weekdays[k] + '<br/> ' + dt + "/" + month + "/" + year + "</p>";
                     dt++;
                     if (k % 7 == 0) {
                         k = 1;
                     } else {
                         k++;
                     }
                 }
                 $(".workingweeks thead th").each(function(a) {
                     if (parseInt(a) >= 1) {
                         $(this).remove();
                     }
                 })
                 $(".table2 table thead tr").append(heade);
                 $(".table2 .one").append(tableheade);
             }
             $scope.headerpop();

             $(".aligntable  .table2 table tr").each(function(a) {
                 $(this).find(" .companyname").remove();
             })
             $(".blurbackgrund,.imgldr").attr("style", "display:none");
             angular.element(document.getElementById('contid')).scope().Staffingpopltion();
             $(".resourcetable").each(function() {
                     $(this).find("td").each(function(a) {
                         $(this).find("input").attr("disabled", "true");
                         if (parseInt(a) <= 4) {
                             $(this).remove();
                         }
                     })
                 })
                 //calender total caluculation
             totalcaluculation();
             //previous month's data read only @ 4 AM Germany time on 1st of corresponding month
             $scope.disablinginputs();
             $scope.Statatical();
             $scope.plannedorqa();




             var widthdata = $(".wrapperwidth").width() - $(".custdisplay").width() - 1;
             $(".weekspresence").attr("style", "width:" + widthdata + "px");
             var zoom = document.documentElement.clientWidth / window.innerWidth;
             $(window).resize(function() {

                 var widthdata = $(".wrapperwidth").width() - $(".custdisplay").width();
                 widthdata = parseInt(widthdata) - 1;
                 $(".weekspresence").attr("style", "width:" + widthdata + "px");
                 var nVer = navigator.appVersion;
                 var nAgt = navigator.userAgent;
                 var browserName = navigator.appName;
                 var fullVersion = '' + parseFloat(navigator.appVersion);
                 var majorVersion = parseInt(navigator.appVersion, 10);
                 var nameOffset, verOffset, ix;

                 var zoomNew = document.documentElement.clientWidth / window.innerWidth;

                 if ((verOffset = nAgt.indexOf("Firefox")) != -1) {
                     browserName = "Firefox";
                     fullVersion = nAgt.substring(verOffset + 8);
                     if (zoom != zoomNew) {

                         $(".table1 td").attr("style", "height:23px;");


                         $(".table1 th").attr("style", "height:86px;");
                         $(".table2 tr th").attr("style", "height:86px;");
                         $("#resourcetable td").attr("style", "height:23px");

                         $(".inputbdy tr").each(function() {
                             $(this).find("td").eq(1).attr("style", "height:25px !important");
                             $(this).find("input").attr("style", "height:24px !important");
                         })
                         $(".companyname ").each(function() {
                             $(this).attr("style", "height:23px !important");
                         })

                         if (window.innerWidth >= 2048) {
                             $(".totalforcalndr").each(function() {
                                 $(this).find("td").eq(1).attr("style", "height:24px !important");

                             })
                         }
                     }

                 }
                 // In Chrome, the true version is after "Chrome" 
                 else if ((verOffset = nAgt.indexOf("Chrome")) != -1) {
                     browserName = "Chrome";
                     fullVersion = nAgt.substring(verOffset + 7);

                 }
             });
         })
         //function for close button
     $(document).on("click", ".closebtn", function() {
         $(".blurbackgrund,.popup").attr("style", "display:none");
         dataforna = 0;
     });
     //function for confrom button
     $(document).on("click", ".cnfrmbtn", function() {
         $(".cancelfun").removeClass("cancelfun");
         $(".blurbackgrund,.popup").attr("style", "display:none");
         clickedfoedata = 1;
         var splitdata = $(this).attr("ng-click").split("(");
         cancelclick = 1;
         var dataforbracket = splitdata[1].split(")");
         var splitbycomma = dataforbracket[0].split(",");
         var a = splitbycomma[0];
         var b = splitbycomma[1];
         var c = splitbycomma[2];
         var d = splitbycomma[3];
         var e = splitbycomma[4];
         angular.element(document.getElementById('contid')).scope().resourceplanningcalc(a, b, c, d, e);
         colorcoding();
     });
     //function for confrom button ends here
     //function for cancel button starts here

     $(document).on("click", ".cancelbtn1", function() {
         $(".blurbackgrund,.popup1").attr("style", "display:none");

     });

     $(document).on("click", ".cancelbtn", function() {
         $(".blurbackgrund,.blurbackgrund1,.popup").attr("style", "display:none");
         $(".cancelfun").val($('.cancelfun').attr('id'));
         cancelclick = 1;
         colorcoding();
         $(".cancelfun").removeClass("cancelfun");
         $(".Projects ").click();
         $(".Accountnamedsp").val("All Account Names ");
         $(".multiSel").val("All Opportunity Names");
     });
     $(document).on("click", ".ui-datepicker-close", function() {

         sessionStorage.setItem("datepickervalmonth", null);
         sessionStorage.setItem("datepickervalmonthfordata", null);
         flagnxt = 1;
         flag = 1;
         $(".strtdateinput").addClass("onff");
         $(".blurbackgrund,.imgldr").attr("style", "display:block");

         var monthno;

         sessionStorage.setItem("datepickerval", $(".setstrtdateinput").val());
         var splitdatedatepicker = ($(".setstrtdateinput").val()).split(" ");
         var listofdata = $(".oprid").val();
         var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
         for (i = 0; i <= monthNames.length - 1; i++) {
             monthno = (monthNames[i] == splitdatedatepicker[0]) ? i : monthno;
         }
         var dateparam = "01." + splitdatedatepicker[0] + "." + splitdatedatepicker[1];
         Visualforce.remoting.Manager.invokeAction(
             '{!$RemoteAction.CtrPSOTable.getDataofMonthfilter}',
             dateparam,
             function(resultforfilter, event) {
                 var daatjsonresultforfilter = htmlDecode(resultforfilter);
                 var parsedDaatjsonfilter = JSON.parse(daatjsonresultforfilter);
                 myDataSet = parsedDaatjsonfilter.Customers;

                 $scope.fileringonload(myDataSet);

             });

         Visualforce.remoting.Manager.invokeAction(
             '{!$RemoteAction.CtrPSOTable.getDataofMonth}',
             dateparam, listofdata,
             function(result, event) {
                 if (event.status) {

                     var daatjson = htmlDecode(result);
                     var parsedDaatjson = JSON.parse(daatjson);
                     var resultobject = parsedDaatjson;
                     $scope.dataforfilter = parsedDaatjson;
                     $scope.noresults = 0;


                     if (resultobject.Customers.length > 0) {
                         $scope.mainPage = tempService.inputbindingtable(resultobject);
                         $scope.dataval = resultobject;
                         startdateobj = resultobject;
                         $scope.calculationonload();
                         myDataSet = $scope.dataval.Customers;


                         $scope.$apply();
                         $scope.stylng = 0;
                         $scope.Staffingpopltion();
                         totalcaluculation();
                         $scope.disablinginputs();
                         $scope.Statatical();
                         $scope.plannedorqa();
                         $scope.projecthealthonload();
                         $(".workingweeks .greycolorsat").attr("style", "border-bottom:none !IMPORTANT;");
                         $(".workingweeks tr td:nth-child(3)").attr("style", "border:none !IMPORTANT;display:none;");
                         $(".workingweeks tr td:nth-child(4)").attr("style", "border:none;border-right: none;");
                         $(".workingweeks input").attr("style", "height:19px;");
                         $scope.noresults = 0;
                         $(".wrapperwidth").attr("style", "display:block;");
                         $(".msg").attr("style", "display:none");
                         $(".blurbackgrund,.imgldr").attr("style", "display:none");

                     } else {
                         $scope.noresults = 1;
                         var datevalue = sessionStorage.getItem("datepickerval");
                         var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                         var spltdatevalue = datevalue.split(" ");

                         $(".strtdateinput").val(monthNames[parseInt(spltdatevalue[0]) - 1] + " " + spltdatevalue[1]);
                         $(".appendtxt").text(" ");
                         $(".appendtxt").append("No results are available for the filtering.")
                         $(".popup,.blurbackgrund").attr("style", "display:block");
                         $(".appndbtns").html("<input type='button' value='OK' class='cancelbtn'>");
                         $(".wrapperwidth").attr("style", "display:none;");

                         $(".blurbackgrund,.imgldr").attr("style", "display:none");
                         $(".blurbackgrund,.msg").attr("style", "display:block;");
                     }
                 }
             }, {
                 buffer: true,
                 escape: true,
                 timeout: 30000
             }
         );
     })
     var j = jQuery.noConflict();
     (function(j) {
         j(document).ready(function() {

             // Connect to the CometD endpoint
             $.cometd.init({
                 url: window.location.protocol + '//' + window.location.hostname + '/cometd/23.0/',
                 requestHeaders: {
                     Authorization: 'OAuth {!$Api.Session_ID}'
                 }
             });

             $.cometd.addListener('/meta/unsuccessful', function(streamingfailure) {
                 var error = streamingfailure.error;
                 var status = streamingfailure.successful;

                 if (!status && typeof error !== "undefined") {
                     $(".appendtxt").text(" ");
                     $(".appendtxt").append("Resource Availability table is not being synced up with latest changes automatically, please refresh the page to get the latest data." + error)
                     $(".popup,.blurbackgrund1").attr("style", "display:block");
                     $(".appndbtns").html(" ");
                     $(".imgldr").attr("style", "display:none");
                     angular.element($(".appndbtns")).append($compile("<input type='button' value='OK' class='' ng-click='streamingerror()'>")($scope));


                     // Reconnected
                 }
             });

             // Subscribe to a topic. JSON-encoded update will be returned
             // in the callback              
             $.cometd.subscribe('/topic/ResourceChanges', function(message) {


                 var pushtopic = message;
                 var valueforcell;
                 var datefr = pushtopic.data.sobject.Scheduled_Date__c;
                 var datefromjson = datefr.split("T");
                 if (pushtopic.data.sobject.Event__c == "Update" || pushtopic.data.sobject.Event__c == "Insert" || pushtopic.data.sobject.Event__c == "Delete") {
                     valueforcell = parseFloat(pushtopic.data.sobject.New_value__c) - parseFloat(pushtopic.data.sobject.Old_value__c)
                 }

                 $(".workingweeks .contactidloop").each(function() {
                     if ($(this).text().trim() == pushtopic.data.sobject.ContactId__c) {
                         $(this).parent().find(".inputfields").each(function() {
                             var newdateinput = $(this).attr("name");
                             var splitnewdateinput = newdateinput.split(".");
                             var combinenewdateinput = splitnewdateinput[0] + "-" + splitnewdateinput[1] + "-" + splitnewdateinput[2];
                             var jsonnewdate = datefromjson[0];
                             var splitjsonnewdate = jsonnewdate.split("-");
                             var combinejsonnewdate = splitjsonnewdate[0] + "-" + splitjsonnewdate[1] + "-" + splitjsonnewdate[2];
                             var newdateinput1 = new Date(splitnewdateinput[2], parseInt(splitnewdateinput[1]) - 1, splitnewdateinput[0]);
                             var jsonnewdate1 = new Date(splitjsonnewdate[0], parseInt(splitjsonnewdate[1]) - 1, splitjsonnewdate[2]);
                             if (newdateinput1.getFullYear() == jsonnewdate1.getFullYear() && newdateinput1.getMonth() == jsonnewdate1.getMonth() && newdateinput1.getDate() == jsonnewdate1.getDate()) {
                                 var prsnt;
                                 if ($(this).val() == "") {
                                     prsnt = 0;
                                 } else {
                                     prsnt = $(this).val();
                                 }
                                 var vl = parseFloat(prsnt) + valueforcell * 8;
                                 if (vl == 0) {
                                     vl = "";
                                 }
                                 $(this).val(vl);
                                 var colorvl = $(this).val();
                                 $(this).removeClass('greencolor greycolor redcolor nacolor white');
                                 if (parseFloat(colorvl) == 8) {
                                     $(this).addClass('greencolor');
                                 }
                                 if (parseFloat(colorvl) < 8) {
                                     $(this).addClass('greycolor');
                                 }
                                 if (parseFloat(colorvl) > 8) {
                                     $(this).addClass('redcolor');
                                 }
                                 if (colorvl == "N/A") {
                                     $(this).addClass('nacolor');
                                 }
                                 var adata = this;
                                 angular.forEach($scope.dataval.Resources, function(resource, i) {
                                     if (resource.ContactId == pushtopic.data.sobject.ContactId__c) {

                                         if (resource.Staffing != "") {
                                             var count = 0;
                                             angular.forEach(resource.Staffing, function(sttfng, i) {
                                                 var jsonnewdate = sttfng.Day;
                                                 var splitjsonnewdate = jsonnewdate.split(".");
                                                 var combinejsonnewdate = splitjsonnewdate[0] + "-" + splitjsonnewdate[1] + "-" + splitjsonnewdate[2];
                                                 var newdateinput1 = new Date(splitnewdateinput[2], parseInt(splitnewdateinput[1]) - 1, splitnewdateinput[0]);
                                                 var jsonnewdate1 = new Date(splitjsonnewdate[2], parseInt(splitjsonnewdate[1]) - 1, splitjsonnewdate[0]);
                                                 if (newdateinput1.getFullYear() == jsonnewdate1.getFullYear() && newdateinput1.getMonth() == jsonnewdate1.getMonth() && newdateinput1.getDate() == jsonnewdate1.getDate()) {
                                                     sttfng.Staff = vl;
                                                     count = count + 1;
                                                     if (parseInt(sttfng.HoursOff) != 0 && parseInt(sttfng.Staff) != 0) {

                                                         if (parseFloat(sttfng.HoursOff) == parseFloat(sttfng.Staff)) {

                                                             $(adata).removeClass('greencolor greycolor redcolor nacolor white');
                                                             $(this).attr("disabled", "true");
                                                             $(adata).addClass("holiday");

                                                         }
                                                     }
                                                 }
                                             });
                                         } else {
                                             resource.Staffing.push({
                                                 "Day": newdateinput,
                                                 "SpecialOccasion": "true",
                                                 "Staff": vl
                                             });
                                         }
                                         if (count == 0) {
                                             resource.Staffing.push({
                                                 "Day": newdateinput,
                                                 "SpecialOccasion": "true",
                                                 "Staff": vl
                                             });
                                         }



                                     }
                                 });


                             }
                         })
                     }
                 })


             });

         });
     })(j)

 });



 function totalcaluculation() {
     $(".inputbdy").each(function() {
         var count = 0;
         var bdythis = $(this);
         var txtx = "";
         $(this).find("tr:first-child .inputfields").each(function() {
             count = count + 1;
             var a = $(this).attr("name");
             var splita = a.split(".");

             var b = parseInt(a);
             var valuee = 0;
             if (splita.length > 1) {
                 $(bdythis).find("tr td input[name='" + a + "']").each(function() {

                     var valueofdata = parseInt(a);
                     if ($(this).val() != "") {
                         valuee = valuee + parseFloat($(this).val());
                     }
                 })
             } else {
                 valuee = 0;
             }

             var spltdaat = (valuee).toString().split("");
             if (spltdaat.length >= 5) {
                 valuee = parseFloat(valuee).toFixed(2);
                 txtx = txtx + "<td style='font-size:8px;'>" + valuee + "</td>";

             } else {

                 txtx = txtx + "<td>" + valuee + "</td>";
             }



         });
         $(this).find(".totalforcalndr").append(txtx);
     });
 }
 //utility functions defined for this page
 //function Europen number caluculation
 function euroconverter(number) {
     var numberStr = parseFloat(number).toFixed(2).toString();
     var numFormatDec = numberStr.slice(-2); /*decimal 00*/
     numberStr = numberStr.substring(0, numberStr.length - 3); /*cut last 3 strings*/
     var numFormat = new Array;
     while (numberStr.length > 3) {
         numFormat.unshift(numberStr.slice(-3));
         numberStr = numberStr.substring(0, numberStr.length - 3);
     }
     numFormat.unshift(numberStr);
     return numFormat.join('.') + ',' + numFormatDec; /*format 000.000.000,00 */
 }

 //function for leapyear caluclation
 function leapYear(year) {
     return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);
 }
 //function for colorsetting
 function colorcoding() {
     $(".cancelfun").removeClass('greencolor greycolor redcolor nacolor white');
     if ($(".cancelfun").val() == "8") {
         $(".cancelfun").addClass("greencolor");
     } else if (parseFloat($(".cancelfun").val()) < 8) {
         $(".cancelfun").addClass("greycolor");
     } else if (parseFloat($(".cancelfun").val()) > 8) {
         $(".cancelfun").addClass("redcolor");
     } else if ($(".cancelfun").val() == "N/A") {
         $(".cancelfun").addClass("nacolor");
     } else if ($(".cancelfun").val() == "") {
         $(".cancelfun").addClass("white");
     }
     $(".cancelfun").removeClass('cancelfun');
 }

 /*
 @changedResource the corresponding changed nested resource object extracted from dataset and
 @resourceChangedForMonth the integer value for the month it has been changed eg Jan-1 , Feb-2.. so on..
 */
 function validateMonthToLimitOnResourceAllocation(changedResource, resourceChangedForMonth, a) {

     $(".dataforprint").text(changedResource.Staffing)
     var resourceStaffingForSelectedMonthRange = changedResource.Staffing;
     var staffingForChangedMonth = _.filter(resourceStaffingForSelectedMonthRange, function(eachStaffingItem) {
         return parseFloat(moment(eachStaffingItem["Day"], "DD.MM.YYYY").month()) + 1 === resourceChangedForMonth;
     });
     var staffedDayListOfChangedMonth = _.pluck(staffingForChangedMonth, 'Staff');
     var totalStaffingHoursForChangedMonth = _.reduce(staffedDayListOfChangedMonth, function(totalStaffing, staffingHoursForEachAllocatedDay) {

         if (staffingHoursForEachAllocatedDay == "" || typeof staffingHoursForEachAllocatedDay === "undefined") {

             staffingHoursForEachAllocatedDay = 0;

         }
         if (totalStaffing == "") {
             totalStaffing = 0;
         }
         return totalStaffing + parseFloat(staffingHoursForEachAllocatedDay);
     }, 0);

     var monthtlyLimitHours = parseFloat(changedResource.MonthToLimitMap[resourceChangedForMonth]) * 8;

     if (a.currentTarget.value == "") {
         a.currentTarget.value = 0;
     }
     var updatedata = 0;
     var ab = $(a.target).attr("id");
     if (ab != "" && a.currentTarget.value != "") {
         updatedata = parseFloat(a.currentTarget.value) - parseFloat(ab);
         totalStaffingHoursForChangedMonth = totalStaffingHoursForChangedMonth + updatedata;
     } else {
         totalStaffingHoursForChangedMonth = totalStaffingHoursForChangedMonth + parseFloat(a.currentTarget.value)
     }
     if (a.currentTarget.value != 0) {
         if (_.has(changedResource.MonthToLimitMap, resourceChangedForMonth.toString())) {
             if (parseFloat(totalStaffingHoursForChangedMonth) / 8 > parseFloat(monthtlyLimitHours / 8)) {
                 $(".appendtxt").text(" ");
                 $(".appendtxt").append(changedResource.ResourceName + "s Allocation of " + totalStaffingHoursForChangedMonth + " Hours exceeds Month Limit of" + monthtlyLimitHours + " Hours")
                 $(".popup,.blurbackgrund").attr("style", "display:block");
                 $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
                 cancelclick = 0;
                 $(a.target).addClass('cancelfun');
                 return 1;
             }
         } else {
             $(".appendtxt").text(" ");
             $(".appendtxt").append(" No contingent for " + changedResource.ResourceName + " has been assigned for this month. Please check with Sales Operations Team for adjustments.")
             $(".popup,.blurbackgrund").attr("style", "display:block");
             $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
             cancelclick = 0;
             $(a.target).addClass('cancelfun');
             return 1;
         }
     }
 }
        </script>
    </head>
    <body data-ng-app="myApp">
   
         <apex:pageMessages id="showmsg"></apex:pageMessages>        
          <p class="dataforprint" style="display:none;"> </p>
        <div data-ng-controller="MyCtrl" id="contid">
            <div class="blurbackgrund1" ng-show="showhide"></div>
            <div class="blurbackgrund" ng-show="showhide"></div>
            <div class="popup" ng-show="showhide">
                <div class="header"></div>
                <div><p class="appendtxt"></p></div>
                <div class="footer"><div class="appndbtns"></div></div>
            </div>


            <div class="popup1">
                <div class="header"></div>
                <div><p class="appendtxt"></p></div>
                <div class="footer"><div class="appndbtns1"><input type="button" class="cancelbtn1" value="OK" ng-click="rerunJob()" /><input type="button" value="Cancel" class="cancelbtn1"/></div></div>
            </div>
            <apex:form >
<input type="text" style="height:1px  !important;border:0px !important"/>
            <apex:outputPanel id="panel">
            <apex:actionStatus id="counterStatus" startText="The job was successfully submitted, you'll see results in a few minutes"  onStart="document.body.style.cursor = 'wait';return true;" onStop="document.body.style.cursor = 'default';return true;" >
            <apex:facet name="start" >   
              </apex:facet>
            <apex:facet name="stop">
              </apex:facet>
        </apex:actionStatus>
        </apex:outputPanel>
        <apex:actionFunction action="{!runJob}" name="runjob" reRender="panel"/>
        <!--<apex:actionFunction action="{!runMonthlyJob}" name="Monthlyjob" reRender="panel"/>-->
  <apex:pageBlock >    
  <div class="loginacess">
<p class="joberrormsg"></p>
    <span class="psotoolheader">PSO Scheduler 2.1</span> 
<input type="button" class="weekl btn" value="Recalculate previous (split) week" ng-click="rerunJobforerror()" style="height:20px;width:200px;"/>

   <!-- <input type="button" class="montlyl btn" value="Recalculate End of Month" ng-click="recalculateendmonth()" style="height:20px;width:150px;"/>-->
    Date: <apex:inputText value="{!DateValue}" size="10" id="demo" style="width:100px;border:1px solid #B8B1B1" styleClass="datepickerforbind" ></apex:inputText> 
    </div>
      <div class="bordervalue">
  <table class="custdetails" >
                <tr>
                    <td>Account:</td>
                    <td>

 <dl class="dropdown"> 
  
    <dt>
   
     <!-- <span class="hida">Select</span>    
      <p class="multiSel"></p>  -->
     <a href="#" class="">
        <input type="text" class="Accountnamedsp" value="All Account Names" autofocus="true"/>
    </a>
   
    </dt>
  
    <dd>
        <div class="mutliSelect accountname">
       <!-- data-ng-change="projects(projectsSelecteddata)"-->
               <select class="Customers " ng-click="accountnamedsply(blisterPackTemplateSelected);" data-ng-model="blisterPackTemplateSelected" data-ng-change="Customersfilter(blisterPackTemplateSelected)"  multiple="true">
 <option ng-repeat="c in persons" value="{{c.value}}" ng-selected="model.value == c.Id">{{c.value}}</option>
                     </select>
           

        </div>
    </dd>
 
</dl>
               
                
                     </td>
           
                <td>Opportunity:</td>
              
            <td>
          
 <input type="text" class="oprid" />
            <dl class="dropdown"> 
  
    <dt>
   
     <a href="#">
        <input type="text" class="multiSel" value="All Opportunity Names" />
    </a>
   
    </dt>
  
    <dd>
        <div class="mutliSelect clickforselect">
     
           <select class="Projects" data-ng-model="projectsSelecteddata"  ng-blur="oppselectedvalue()" multiple="true" ng-click="oprnameselect(projectsSelecteddata)" on-finish-render="ngRepeatFinishedforselectbox"> 
   <option ng-repeat="c in projectsselect" value="{{c.Id}}" >{{c.value}}</option>
            </select>
          

        </div>
    </dd>
 
</dl>
        </td>
   
        <td>Start Month :</td>
        <td><input type="text" class="strtdateinput" /><input type="text" class="setstrtdateinput" style="display:none;"/></td>
    </tr>
</table>
</div>
  </apex:pageBlock>
</apex:form>         
           <img src="/resource/1433350802000/loader" class="imgldr"/>
<div class="hdng wrapperwidth" >
    <div class="custdisplay">
        <div data-ng-repeat="dataval in dataval.Customers" class="custvalues" on-finish-render="ngRepeatFinished">
            <div data-ng-repeat="dataval1 in dataval.Projects" >
                <table  class="custdetailview" >
                    <tr ><td  style="text-align:left;width:5px;padding-top:10px;">Acc:</td><td style="text-align:left;padding-top:10px" class="customername"><a ng-href="/{{dataval.AccountId}}" target="_blank">{{dataval.AccountName}}</a></td></tr>
                    <tr><td  style="text-align:left;vertical-align:top;">Opp:</td><td  style="text-align:left;vertical-align: top;" class="prjname"><a ng-href="/{{dataval1.OpportunityId}}" target="_blank">{{dataval1.OpportunityName}}</a></td></tr>
                    <tr><td  style="text-align:left;">PM:</td><td  style="text-align:left;"><a ng-href="/{{dataval1.ProjectManagerId}}" target="_blank">{{dataval1.OurProjectManager}}</a></td></tr>
                    <tr><td> </td><td> <p style='position:relative;left:-32px;margin:0px;padding:0px;'> 
                    <a ng-href="/apex/OpportunityLineItemsEdit?id={{dataval1.OpportunityId}}" target="_blank" style="text-decoration:none;"><input type="button" style="height:20px;width:87px;"  value="Change Quantity" class="btn"/></a> <input type="button" style="height:20px;width:87px;margin-right:5px;" value="Project Health"  class="btn"/><select class="projecthealthoption" data-ng-model="projecthealth1"  style="min-height:20px !important" ng-change="projecthealth(dataval1.OpportunityId,projecthealth1);"> </select></p></td><td> </td></tr>
                </table>
                <div  class="Resourcesection" >
                    <div >
                        <table class="table1">
                            <tr>
                                <thead>
                                    <th >Resource<br/> Name</th><th >Product</th><th >Sold<br></br> Days</th><th>Planned <br></br>Days</th><th>Un-<br></br>Planned<br></br> Days</th>
                                </thead>
                            </tr>
                            <tbody class="totalscalc">
                                <tr data-ng-repeat="dataval2 in dataval1.Resources">
                                    <td class="resource" style='padding:0 5px !important' >{{dataval2.ResourceName}}</td><td    style='padding:0 5px !important'>{{dataval2.Product}}</td>    <td class="noplan"  style='padding:0 5px !important'>{{dataval2.PlannedDays}}</td><td style='padding:0 5px !important'>{{dataval2.SoldDays}}</td> <td class="unplannedhrs" style='padding:0 5px !important'>{{dataval2.LastModifiedDate}}</td><td  style='padding:0 5px !important'>{{dataval2.PlannedDays}}</td> <td  class="unplannedcal" style='padding:0 5px !important'>{{dataval2.unplanne }}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="clearfix"></div>
        <h1 style="position:relative;top:20px;">Resource Availability</h1>
        <div class="clearfix"></div>
        <div class="custvalues ">
        <table class="table1" id="resourcetable">
            <tr>
                <thead>
                   <th >Title</th> <th >Resource Name</th>
                    <!--
                    <th >Role</th> <th > Sold days</th><th >Planned Days<br/> days</th><th >Unplanned <br/>days</th><th >Latest<br/> Modification</th>-->
                </thead>
            </tr>
            <tr data-ng-repeat="dataval2 in dataval.Resources">
                <td style="padding:0 5px !important;" ng-style='set_color(dataval2.AccountName)' >{{dataval2.Title}}</td><td style="padding:0 5px !important;" ng-style='set_color(dataval2.AccountName)' >{{dataval2.ResourceName}}</td>
                <!--
                <td class="" >{{dataval2.SpecialOccasion}}</td><td >{{dataval2.SoldDays}}</td><td class="" ></td><td ></td><td class="" ></td>-->
            </tr>
        </table>
        </div>
         <div class="clearfix"></div>
    </div>
    <div class="weekspresence" >
        <div class="weekpresencedata">
            <div data-ng-repeat="dataval in dataval.Customers">
                <div data-ng-repeat="dataval1 in dataval.Projects" class="aligntable">
                           <table  class="custdetailview hiddentable" >
                    <tr ><td  style="text-align:left;width:5px;padding-top:10px;">Acc:</td><td style="text-align:left;padding-top:10px" class="customername"><a ng-href="/{{dataval.AccountId}}" target="_blank">{{dataval.AccountName}}</a></td></tr>
                    <tr><td  style="text-align:left;vertical-align:top;">Opp:</td><td  style="text-align:left;vertical-align: top;" class="prjname"><a ng-href="/{{dataval1.OpportunityId}}" target="_blank">{{dataval1.OpportunityName}}</a></td></tr>
                    <tr><td  style="text-align:left;">PM:</td><td  style="text-align:left;"><a ng-href="/{{dataval1.ProjectManagerId}}" target="_blank">{{dataval1.OurProjectManager}}</a></td></tr>
                    <tr><td> </td><td> <p style='position:relative;left:-32px;margin:0px;padding:0px;'> 
                    <a ng-href="/apex/OpportunityLineItemsEdit?id={{dataval1.OpportunityId}}" target="_blank" style="text-decoration:none;"><input type="button" style="height:20px;width:87px;"  value="Change Quantity" class="btn"/></a> <input type="button" style="height:20px;width:87px;" value="Project Health"  class="btn"/><select class="projecthealthoption" data-ng-model="projecthealth1"  style="min-height:20px !important" ng-change="projecthealth(dataval1.OpportunityId,projecthealth1);"> </select></p></td><td> </td></tr>
                </table>
                    <div class="table2" >
                        <table >
                            <tr>
                                <thead>
                                    <tr> <th style="padding:1px 5px !important;" class="fxdwidth">Sales<br></br> Price( &euro;)</th><th style="padding:1px 10px !important;" class="fxdwidth">Sold<br></br> Rev.( &euro;)</th><th style="padding:1px 7px !important;" class="fxdwidth">Planned<br></br> Rev.( &euro;)</th><th style="padding:1px 20px !important;" >Latest<br></br> Mod.</th></tr>
                                </thead>
                            </tr>
                            <tbody class="inputbdy">
                                <tr class="tbody1 dsplyhde" data-ng-repeat="dataval2 in dataval1.Resources" template="{{mainPage}}" compile-data="x" >
                                    <!--<td template="{{mainPage}}" compile-data="x"> </td> -->
                                </tr>
                                <tr class="tbody1 dsplyhde" data-ng-repeat="dataval2 in dataval1.Resources" template="{{mainPagechange}}" compile-data="x" >
                                    <!--<td template="{{mainPage}}" compile-data="x"> </td> -->
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="clearfix" />
                </div>
            </div>
            <div class="clearfix" />
            <h1 class="newh1">Resource Availability Table</h1>
            <div class="clearfix" />
            <div class="table2" id="lasttable">
                <table class="workingweeks">
                    <tr>
                        <thead>
                            <tr><th>Account Name</th> </tr>
                        </thead>
                    </tr>
                    <tr class="tbody1 resourcetable" data-ng-repeat="dataval2 in dataval.Resources" template="{{mainPage}}" compile-data="x" />
                    </table>
                    <div class="clearfix"></div>
                </div>
            </div>
        </div>
        <div class="clearfix"></div>
    </div>
</div>
 <p class="msg">Please select Opportunities you want to see using the filters above.</p>
</body>
</html>
</apex:page>