<!--Company Name: YOUR SL
    Author: Phani,Anudeep
    Page Name: PSOTable
    Description: Resource allocation utility for internal project managment
Versions:
    1.2 Added planned and unplanned functionality on date 01/03/2015
    1.1 Added filtering functionality on date 02/26/2015
    1.0 Intial version created on date 02/22/2015
-->
<!-- start of the page -->
<apex:page sidebar="false" name="PSOTable" controller="CtrPSOTable"  action="{!init}">
<apex:includeScript value="{!URLFOR($Resource.StreamingApiScripts,'jquery-1.5.1.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.StreamingApiScripts,'json2.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.StreamingApiScripts,'Cometd.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.StreamingApiScripts,'jquery.cometd.js')}"/>
<apex:form >
  <apex:pageBlock title="PSO Tool">
    <apex:commandButton style="height:20px;width:50px;" value="Run Job" action="{!runJob}" />
  </apex:pageBlock>
</apex:form>
<html>
    <head><title>PSOTable</title>
      <link rel="stylesheet"  href="{!$Resource.datepicker}"></link>
      <link rel="stylesheet"  href="/resource/1430707067000/PsotoolCss"></link>
      <script type="text/javascript" src="{!$Resource.PsoToolLibs}"></script>
      <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.17/jquery-ui.min.js"></script>
      <script src="/resource/1430742754000/PsoToolMomentjs"></script>
      <script src="/resource/1430888909000/PsoToolUnderscorejs"></script>

      <script type="text/javascript">
        var weekdays = {};
        weekdays['1'] = "MO";
        weekdays['2'] = "TU";
        weekdays['3'] = "WE";
        weekdays['4'] = "TH";
        weekdays['5'] = "FR";
        weekdays['6'] = "SA";
        weekdays['7'] = "SU";

        function htmlDecode(value) {
            if (value) {
                return $('<div />').html(value).text();
            } else {
                return '';
            }
        }
        var startdateobj;
        var cancelclick = 1;
        var dataforna = 0;
        var universalobject = "";
        var clickedfoedata = 0;
        //Creating a module in angularjs
        var app = angular.module('myApp', []);
        app.factory('serviceforgetaccount', ['$q', '$rootScope', function($q, $rootScope) {
          return function() {
            var deferred = $q.defer();
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.CtrPSOTable.getAccount}',function(result, event) {
              $rootScope.$apply(function() {
                if (event.status) {
                  deferred.resolve(result);
                } else {
                  deferred.reject(event);
                }
              })
            }, {
              buffer: true,
              escape: true,
              timeout: 30000
            }
          );
          return deferred.promise;
          }
        }]);
        //Dataset creation and loading calendar
        app.factory('tempService', function() {
        //This function is used to bind calender inputs to table
          return {
          inputbindingtable: function(resultobject) {
              var factorytmp = resultobject;
              universalobject = factorytmp;
              var strtdate = factorytmp.StartDate;
              var enddate = factorytmp.EndDate;
              var splitstrtdate = strtdate.split(".");
              var splitenddate = enddate.split(".");
              var date = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
              var dateforenddate = new Date(splitenddate[2], parseInt(splitenddate[1]) - 1, splitenddate[0]);
              //difference between start date and end date
              var oneDay = 86400000; // hours*minutes*seconds*milliseconds
              var firstDate = new Date(splitenddate[2], parseInt(splitenddate[1]) - 1, splitenddate[0]);
              var secondDate = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
              var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
              var data = "";
              var day = date.getDay();
              var dateforenddate = parseInt(date.getDate());
              var year = parseInt(date.getFullYear());
              var month = parseInt(date.getMonth()) + 1;
          
              if (day == 0) {
                  day = 7;
              }
              var k = parseInt(day);
              var lp = leapYear(year);
              var dt;
              dt = dateforenddate;

              for (j = 0; j <= parseInt(diffDays); j++) {

                  if (month == 2) {
                      if (lp) {
                          if (dt == 30) {
                              dt = 1;
                              month = month + 1;
                          }
                      } else {
                          if (dt == 29) {
                              dt = 1;
                              month = month + 1;
                          }
                      }
                  } else if (month == 4 || month == 6 || month == 9 || month == 11) {
                      if (dt == 31) {
                          dt = 1;
                          month = month + 1;
                      }
                  } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
                      if (month == 12) {
                          if (dt == 32) {
                              dt = 1;
                              month = 1;
                              year = year + 1;
                          }
                      } else if (dt == 32) {
                          dt = 1;
                          month = month + 1;
                      }
                  }

                  var a = dt + "." + month + "." + year;
                  var b = weekdays[k] + dt;
                  if (j == parseInt(diffDays)) {
                      var cmbne = month + "-" + dt + "-" + year;
                      var weekno1 = moment(cmbne, "MM-DD-YYYY").startOf('isoweek').week();
                      weekno1 = weekno1;
                      if (weekdays[k] == "SA" || weekdays[k] == "SU") {

                          data = data + '<td><input name="' + a + '" class="inputfields greycolorsat ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '" ng-model-ngblur="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td><td><input type="text" name="' + weekno1 + '" class="mwdrdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '" class="mwdadot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdrdot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdadot inputfields" disabled="true"></td>';
                      } else {
                                               
                          var cmbne = month + "-" + dt + "-" + year;
                          var weekno1 = moment(cmbne, "MM-DD-YYYY").startOf('isoweek').week();
                          weekno1 = weekno1;
                          data = data + '<td><input name="' + a + '" class="inputfields ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '" ng-model-ngblur="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td><td><input type="text" name="' + weekno1 + '" class="mwdrdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '" class="mwdadot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdrdot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdadot inputfields" disabled="true"></td>';
                      }
                  } else if (weekdays[k] == "SA" || weekdays[k] == "SU") {
                      if (weekdays[k] == "SU") {
                      
                          var cmbne = month + "-" + dt + "-" + year;
                          var weekno1 = moment(cmbne, "MM-DD-YYYY").startOf('isoweek').week();
                          weekno1 = weekno1;
                          if (parseInt(dt) == 1) {

                              data = data + '<td><input type="text" name="' + weekno1 + '"  class="mwdrdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '" class="mwdadot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdrdot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdadot inputfields" disabled="true"></td><td><input name="' + a + '" class="inputfields greycolorsat ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '" ng-model-ngblur="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td><td><input type="text" name="' + weekno1 + '" class="drdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '" class="dadot inputfields" disabled="true"></td>';
                          } else {
 
                              data = data + '<td><input name="' + a + '" class="inputfields greycolorsat ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '"  ng-model-ngblur="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td><td><input type="text" name="' + weekno1 + '" class="drdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '" class="dadot inputfields" disabled="true"></td>';
                          }
                      } else {
                          var cmbne = month + "-" + dt + "-" + year;
                          var weekno1 = moment(cmbne, "MM-DD-YYYY").startOf('isoweek').week();
                          weekno1 = weekno1;
                          if (parseInt(dt) == 1) {
 
                              data = data + '<td><input type="text" name="' + weekno1 + '"  class="mwdrdot inputfields" disabled="true"></td><td><input type="text" name="' + weekno1 + '"  class="mwdadot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdrdot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdadot inputfields" disabled="true"></td><td><input name="' + a + '" class="inputfields greycolorsat ' + weekdays[k] + dt + month + year + '" ng-model-ngblur ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td>';
                          } else {
 
                              data = data + '<td><input name="' + a + '"  ng-model-ngblur="' + weekdays[k] + dt + month + year + '" class="inputfields greycolorsat ' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-model="' + weekdays[k] + dt + month + year + '" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')"></input></td>';
                          }
                      }
                  } else {
                      var cmbne = month + "-" + dt + "-" + year;
                      var weekno1 = moment(cmbne, "MM-DD-YYYY").startOf('isoweek').week();
                      weekno1 = weekno1;
                      if (parseInt(dt) == 1) {
                          if (weekdays[k] == "MO") {
  
                              data = data + '<td><input type="text" name="' + month + '"  class="mdrdot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdadot inputfields" disabled="true"></td><td><input name="' + a + '" class="inputfields ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '"  ng-model-ngblur ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')" ></input></td>';
                          } else {
  
                              data = data + '<td><input type="text" name="' + weekno1 + '" class="mwdrdot inputfields"  disabled="true"></td><td><input type="text" name="' + weekno1 + '"  class="mwdadot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdrdot inputfields" disabled="true"></td><td><input type="text" name="' + month + '" class="mdadot inputfields" disabled="true"></td><td><input name="' + a + '" class="inputfields ' + weekdays[k] + dt + month + year + '" ng-model="' + weekdays[k] + dt + month + year + '" ng-model-ngblur ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')" ></input></td>';
                          }
                      } else {
 
                          data = data + '<td><input name="' + a + '"  class="inputfields ' + weekdays[k] + dt + month + year + '" ng-model-ngblur="' + weekdays[k] + dt + month + year + '"  ng-model="' + weekdays[k] + dt + month + year + '" ng-focus="storevalue($event)" ng-change="plannedCalculation($event,$parent.$parent.$parent.$index,$parent.$parent.$index,$index,\'' + a + '\')" ></input></td>';
                      }
                  }
                  dt++;
                  if (k % 7 == 0) {
                      k = 1;
                  } else {
                      k++;
                  }
              }
              data = "<td>{{dataval2.SalesPrice}} €</td><td>{{dataval2.soldrev}} </td><td>{{dataval2.plnndreven}} </td><td>{{dataval2.LastModifiedDate|date:'d MMM yyyy'}}</td><td class='Staffing' style='display:none;'>{{dataval2.Staffing}}</td><td class='statical' style='display:none;'>{{dataval2.Statistics}}</td><td class='widderclumn'></td><td class='contactidloop' style='display:none;'>{{dataval2.ContactId}}</td>" + data;
              return data;
          }
      }
  });
  //template for inputfields of calender Ends
  app.directive('onFinishRender', function($timeout) {
      return {
          restrict: 'A',
          link: function(scope, element, attr) {
              if (scope.$last === true) {
                  $timeout(function() {
                      scope.$emit('ngRepeatFinished');
                  });
              }
          }
      }
  });
  //Compile function for attaching template to scope Starts Here
  app.directive('compileData', function($compile) {
      return {
          scope: true,
          replace: true,
          link: function(scope, element, attrs) {
              var elmnt;
              attrs.$observe('template', function(myTemplate) {
                  if (angular.isDefined(myTemplate)) {
                      // compile the provided template against the current scope
                      elmnt = $compile(myTemplate)(scope);
                      element.html(""); // dummy "clear"
                      element.append(elmnt);
                  }
              });
          }
      };
  });
  //Directive for blur,keyup,keydown Starts Here
  app.directive(['focus', 'blur', 'change', 'keyup', 'keydown', 'keypress'].reduce(function(container, name) {
      var directiveName = 'ng' + name[0].toUpperCase() + name.substr(1);
      container[directiveName] = ['$parse', function($parse) {
          return function(scope, element, attr) {
              var fn = $parse(attr[directiveName]);
              element.bind(name, function(event) {
                  scope.$apply(function() {
                      fn(scope, {
                          $event: event
                      });
                  });
              });
          };
      }];
      return container;
  }, {}));
  //Controller Starts Here
  app.controller('MyCtrl', function($scope, $compile, serviceforgetaccount, tempService, $q) {
      var myDataSet1;
      serviceforgetaccount().then(function(result) {
          var daatjson = htmlDecode(result);

          var resultobject = JSON.parse(daatjson);
          
          $scope.mainPage = tempService.inputbindingtable(resultobject);
          $scope.dataval = resultobject;
          $scope.focusdata = "";
          //code for template of binding input field of calender
          var myDataSet1 = $scope.dataval1;
          //caculation for planned and unplanned days
          $scope.calculationonload = function() {
              angular.forEach($scope.dataval.Customers, function(Customers, i) {
                  angular.forEach(Customers.Projects, function(projectss, i) {
                      angular.forEach(projectss.Resources, function(resurce, i) {
                          resurce.PlannedDays = resurce.PlannedDays / 8;
                          resurce.SoldDays = resurce.SoldDays / 8;
                          if (resurce.SalesPrice == null) {
                              resurce.SalesPrice = 0;
                          }
                          resurce.SalesPrice = parseFloat(resurce.SalesPrice).toFixed(2);
                          $scope.unplannedindays = parseFloat(resurce.SoldDays) - parseFloat(resurce.PlannedDays);
                          $scope.soldreven = parseFloat(resurce.SalesPrice) * parseFloat(resurce.SoldDays);
                          $scope.plnndreven = parseFloat(resurce.SalesPrice) * parseFloat(resurce.PlannedDays);
                          resurce.PlannedDays = resurce.PlannedDays.toFixed(2).toString().replace(".", ",");
                          resurce.SoldDays = resurce.SoldDays.toFixed(2).toString().replace(".", ",");
                          $scope.unplannedindays = $scope.unplannedindays.toFixed(2);
                          var ab = $scope.unplannedindays.toString();
                          var soldrevstring = $scope.soldreven.toFixed(2).toString();
                          var plnndrevstring = $scope.plnndreven.toFixed(2).toString();
                          $scope.unplannedindays = ab.replace(".", ",");
                          $scope.soldreven = soldrevstring.replace(".", ",");
                          $scope.plnndreven = plnndrevstring.replace(".", ",");
                          $scope.date = resurce.LastModifiedDate.split(" ");
                          resurce.LastModifiedDate = $scope.date[0];
                          resurce.unplanne = "" + $scope.unplannedindays + "";
                          resurce.soldrev = "" + $scope.soldreven + "";
                          resurce.plnndreven = "" + $scope.plnndreven + "";
                          angular.forEach(resurce.Statistics, function(sttcs, i) {
                              var strtdate = sttcs.StartDate;
                              var enddate = sttcs.EndDate;
                              var splitstrtdate = strtdate.split(".");
                              var splitenddate = enddate.split(".");
                              $(".enddateinput").val(splitenddate[0] + "-" + splitenddate[1] + "-" + splitenddate[2]);
                              //differnce between startdate and end date starts
                              var oneDay = 86400000; // hours*minutes*seconds*milliseconds
                              var firstDate = new Date(splitenddate[2], parseInt(splitenddate[1]) - 1, splitenddate[0]);
                              var secondDate = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
                              var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
                              var cmbne = splitenddate[1] + "-" + splitenddate[0] + "-" + splitenddate[2];
                              var weekno = moment(cmbne, "MM-DD-YYYY").startOf('isoweek').week();
                              //differnce between startdate and end date ends
                              weekno = weekno;
                              splitenddate[1] = parseInt(splitenddate[1]);
                              if (diffDays == 6) {
                                  sttcs["Day"] = "Week";
                                  sttcs["wmno"] = weekno;
                              } else if (diffDays < 7) {
                                  sttcs["Day"] = "MWeek";
                                  sttcs["wmno"] = weekno;
                              } else {
                                  sttcs["Day"] = "Month";
                                  sttcs["wmno"] = splitenddate[1];
                              }
                              var splitstt = sttcs.Days.split("/");
                              var splitsttrev = sttcs.Revenue.split("/");
                              if (parseFloat(splitstt[0]) == 0 && parseFloat(splitstt[1]) == 0) {
                                  sttcs.Days = "-/-"
                              }
                              if (parseFloat(splitsttrev[0]) == 0 && parseFloat(splitsttrev[1]) == 0) {
                                  sttcs.Revenue = "-/-"
                              }
                          });
                      })
                  })
              })
          }
          $scope.calculationonload();
          myDataSet = $scope.dataval.Customers;
          startdateobj = $scope.dataval;
          //Display customer and projects information on initial page load
          var newthing = [],customer = [],projectload = [];
          customer.push({
              "value": "All Account Names"
          });
          projectload.push({
              "value": "All Opportunity Names"
          });
          angular.forEach(myDataSet, function(a, b) {
              var project = new Array();
              angular.forEach(a.Projects, function(an, b) {
                  projectload.push({
                      "value": an.OpportunityName
                  });
                  project.push({
                      "name": an.OpportunityName
                  });
              })
              newthing.push({
                  "customer": a.AccountName,
                  "project": project
              });
              customer.push({
                  "value": a.AccountName
              });
          })
          $scope.persons = customer;
          $scope.projectdetails = newthing;
          var foo2 = _.unique(projectload, false, function(item, k, v) {
              return item.value;
          });
          $scope.projectsselect = foo2;
          $scope.blisterPackTemplateSelected = $scope.persons[0];
          $scope.projectsSelecteddata = $scope.projectsselect[0];
          //Function for storing resource allocation value onfocus event
          $scope.storevalue = function(val) {
                  $scope.focusdata = val.currentTarget.value;
                  $(val.target).attr("id", "" + $scope.focusdata + "");
              }
              //datepicker click function
          $(document).on("click", ".ui-datepicker-close", function() {
                  var monthno;
                  var splitdatedatepicker = ($(".setstrtdateinput").val()).split(" ");
                  var monthNames = ["January", "February", "March", "April", "May", "June","July", "August", "September", "October", "November", "December"];
                  for (i = 0; i <= monthNames.length - 1; i++) {
                      monthno = (monthNames[i] == splitdatedatepicker[0])? i : monthno ;
                  }
                  var dateparam = "01." + splitdatedatepicker[0] + "." + splitdatedatepicker[1];
                  Visualforce.remoting.Manager.invokeAction(
                      '{!$RemoteAction.CtrPSOTable.getDataofMonth}',
                      dateparam,
                      function(result, event) {
                          if (event.status) {
                              var daatjson = htmlDecode(result);
                              var parsedDaatjson = JSON.parse(daatjson);
                              var resultobject = parsedDaatjson;
                              $scope.dataforfilter = parsedDaatjson;

                              if (resultobject.Customers.length > 0) {
                                  $scope.mainPage = tempService.inputbindingtable(resultobject);
                                  $scope.dataval = resultobject;
                                  startdateobj = resultobject;
                                  $scope.calculationonload();
                                  myDataSet = $scope.dataval.Customers;
                                  $scope.$apply();
                                  $scope.headerpop();
                                  $scope.Staffingpopltion();
                                  $scope.projects($scope.projectsSelecteddata);
                                  $scope.calculationandconvertion();
                                  totalcaluculation();
                                  //previous month's data read only @ 4 AM Germany time on 1st of corresponding month
                                 $scope.disablinginputs();
                                 
                                  $(".table2").each(function(co) {
                                      var a = $(this).find("thead tr th").height();
                                      if ($(this).attr("id") != "lasttable") {
                                          $(".table1").each(function(co1) {
                                              if (co == co1) {
                                                  $(this).find("thead tr th").attr("style", "height:" + a + "px;padding:1px !important");
                                              }
                                          })
                                      }
                                  })
                                  var a = $("#lasttable thead tr th").height() + 1;
                                  var paddg = $("#lasttable thead tr th").css("padding");
                                  $(".resourcetable").each(function() {
                                      $(this).find("td").each(function(a) {
                                          $(this).find("input").attr("disabled", "true");
                                          if (parseInt(a) <= 5) {
                                              $(this).remove();
                                          }
                                      })
                                  })
                                  var a = resultobject.StartDate;
                                  var splcta = a.split(".");
                                  $(".table2").each(function() {
                                      $(this).find("tr").each(function() {
                                          $(this).find(".mwdrdot").each(function(cu) {
                                              if (cu == 0) {
                                                  $(this).parent().remove();
                                              }
                                          })
                                          $(this).find(".mdadot").each(function(cu1) {
                                              if (cu1 == 0) {
                                                  $(this).parent().remove();
                                              }
                                          })
                                          $(this).find(".mdrdot").each(function(cu2) {
                                              if (cu2 == 0) {
                                                  $(this).parent().remove();
                                              }
                                          })
                                          $(this).find(".mwdadot").each(function(cu3) {
                                                  if (cu3 == 0) {
                                                      $(this).parent().remove();
                                                  }
                                              })
                                          $(this).find(".weekhead").each(function(cu) {
                                              if (cu <= 3) {
                                                  $(this).remove();
                                              }
                                          })
                                      })
                                  })
                                    $scope.Statatical();
                                  $(".workingweeks .greycolorsat").attr("style", "border-bottom:none !IMPORTANT;");
                                  $(".workingweeks tr td:nth-child(3)").attr("style", "border:none !IMPORTANT;");
                                  $(".workingweeks tr td:nth-child(4)").attr("style", "border:none;border-right: none;");
                                  $(".workingweeks input").attr("style", "height:19px;");
                              } else {
                                  $(".appendtxt").text(" ");
                                  $(".appendtxt").append("No results are available for the filtering.")
                                  $(".popup,.blurbackgrund").attr("style", "display:block");
                                  $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
                              }
                          }
                      }, {
                          buffer: true,
                          escape: true,
                          timeout: 30000
                      }
                  );
              })
              //
          $scope.calculationandconvertion = function() {
                  angular.forEach(myDataSet, function(acc, b) {
                      var customer = acc.AccountName;
                      angular.forEach(acc.Projects, function(aprojects, b) {
                          var trdata = ""
                          var secondtable = ""
                          var plandtotal = unplandtotal= rate= solddays= soldrev= plnndreven  = 0;

                          angular.forEach(aprojects.Resources, function(a, b) {
                              var plnd = (a.PlannedDays).toString().replace(",", ".");
                              var unplnddot = (a.unplanne).toString().replace(",", ".");
                              plandtotal = plandtotal + parseFloat(plnd);
                              unplandtotal = unplandtotal + parseFloat(unplnddot);
                              rate = rate + parseFloat(a.SalesPrice);
                              var solddays1 = a.SoldDays;
                              var splitsoldDays = solddays1.toString().replace(",", ".");
                              var cmbine = parseFloat(splitsoldDays);
                              solddays = solddays + cmbine;
                              var fltsoldrev = a.soldrev.replace(",", ".");
                              soldrev = soldrev + parseFloat(fltsoldrev);
                              var fltplndrev = a.plnndreven.replace(",", ".");
                              plnndreven = plnndreven + parseFloat(fltplndrev);
                          });
                          soldrev = soldrev.toFixed(2);
                          var eurosoliddays = euroconverter(solddays);
                          plandtotal = parseFloat(plandtotal).toFixed(2);
                          unplandtotal = parseFloat(unplandtotal).toFixed(2)
                          plandtotal = plandtotal.toString().replace(".", ",");
                          unplandtotal = unplandtotal.toString().replace(".", ",");
                          var latetmodef = soldrev - plnndreven;
                          soldrev = soldrev.toString().replace(".", ",");
                          plnndreven = plnndreven.toFixed(2).toString().replace(".", ",");
                          latetmodef = latetmodef.toFixed(2).toString().replace(".", ",");
                          trdata = "<tr class='totalplannedandun'><td>Totals</td><td></td><td>" + eurosoliddays + "</td><td>" + plandtotal + "</td><td>" + unplandtotal + "</td></tr>";
                          secondtable = "<tr class='totalforcalndr'><td>" + rate.toFixed(2) + "€</td><td style='height:19px;'>" + soldrev + "</td><td>" + plnndreven + "</td><td>" + latetmodef + "</td></tr>"
                          $(".prjname").each(function() {
                              if ($(this).parent().prev().find(".customername").text() == customer && $(this).text() == aprojects.OpportunityName) {
                                  $(this).parent().parent().parent().next().find(".table1 .totalscalc").append(trdata);
                                  $(this).parent().parent().parent().next().find(".inputbdy").append(secondtable);
                              }
                          })
                      });
                  });
              }
                 $scope.disablinginputs = function(){
                                  var disableprevmonth = new Date();
                                  var jsontimestamp = universalobject.TimeStamp;
                                  var splitjsondata = jsontimestamp.split(" ");
                                  var gettingdatesplit = splitjsondata[0].split("-");
                                  var timesplit = splitjsondata[1].split(":");
                                  $(".inputfields").each(function() {
                                          var inputsplit = ($(this).attr("name")).split(".");
                                          if (parseInt(inputsplit[1]) < parseInt(gettingdatesplit[1])) {
                                              $(this).attr("disabled", "true");
                                          }
                                      })
                                      //every sunday from 4 AM Germany time previous week's data needs to be uneditable
                                  var dateforsun = new Date(gettingdatesplit[0], parseInt(gettingdatesplit[1]) - 1, gettingdatesplit[2]);
                                  var dayforjson = dateforsun.getDay();
                                  if (parseInt(timesplit[0]) > 4) {
                                      if (parseInt(timesplit[1]) > 0) {
                                          if (parseInt(timesplit[2]) > 0) {
                                              $(".inputfields").each(function() {
                                                  var inputsplit = ($(this).attr("name")).split(".");
                                                  var dayforweek = parseInt(dayforjson) - 1;
                                                  if (parseInt(inputsplit[1]) <= parseInt(gettingdatesplit[1]) && ((parseInt(inputsplit[0]) < parseInt(dateforsun.getDate()) - dayforweek) )     ) {
                                                    $(this).attr("disabled", "true");
                                                  }
                                              })
                                          }
                                      }
                                  }
                                  $(".totalforcalndr").each(function() {
                  $(this).find("td").each(function(co) {
                      if (co > 3 && co < 8) {
                          $(this).remove();
                      }
                  })
              })


              }
              //Calculation of planned and unplanned hours and blur events starts here
              //logic to display popups for various scenerios like N/A and over allocation
          $scope.plannedCalculation = function(a, b, c, d, g) {
                  if (typeof a !== "undefined") {
                   var currentvalue = a.currentTarget.value;
                      var numbervalidation = new RegExp("^([0-9\.]{0,})$");
                      if (!numbervalidation.test(currentvalue)) {
                          a.currentTarget.value = "";
                         
                      }
                      var cmbineprnt = b + "/" + c + "/" + d;
                      var totalhours = "";
                      $scope.ResourceName = $scope.dataval.Customers[b].Projects[c].Resources[d].ResourceName;
                      var dateofinput = g.split(".");
                      var newdatefordate = new Date(dateofinput[0], dateofinput[1] - 1, dateofinput[2]);
                      var resourceavialblty = $scope.dataval.Resources;
                      var date = g.split(".");
                      var cmbinedate = date[0] + "." + date[1] + "." + date[2];
                      if (a.currentTarget.value == "") {
                          var resurcestffng = $scope.dataval.Customers[b].Projects[c];
                          angular.forEach(resurcestffng.Resources, function(resource, i) {
                              var count = 0;
                              if (resource.ResourceName == $scope.ResourceName) {
                                  angular.forEach(resource.Staffing, function(Staffingdata, i) {
                                      var Staffingdate = Staffingdata.Day.split(".");
                                      var newdateinput1 = new Date(dateofinput[0], dateofinput[1], dateofinput[2]);
                                      var jsonnewdate1 = new Date(Staffingdate[0], Staffingdate[1], Staffingdate[2]);
                                      if (newdateinput1.getFullYear() == jsonnewdate1.getFullYear() && newdateinput1.getMonth() == jsonnewdate1.getMonth() && newdateinput1.getDate() == jsonnewdate1.getDate()) {
                                          Staffingdata.Staff = "";
                                      }
                                  })
                                  if (count != 1) {
                                      if (dataforna != 1) {
                                          if (currentvalue != "") {
                                              resource.Staffing.push({
                                                  "Day": cmbinedate,
                                                  "SpecialOccasion": "true",
                                                  "Staff": currentvalue
                                              });
                                              count = dataforna =  0;
                                          }
                                      }
                                  }
                              }
                          });
                      }
                      var rsultdata = validateMonthToLimitOnResourceAllocation($scope.dataval.Customers[b].Projects[c].Resources[d], parseInt(moment(cmbinedate, "DD.MM.YYYY").month()) + 1, a);
                      if (rsultdata == 1) {
                                                  return false;
                                              }
                      //validation for more than 12hrs
                                                if (parseFloat(a.currentTarget.value) > 8 && parseFloat(a.currentTarget.value) <= 12 ) {
                                                      $(a.target).addClass('Cancelfun');
                                                      $(".appendtxt").text("This is " + a.currentTarget.value+ " hours for this day");
                                                      $(".blurbackgrund,.popup").attr("style", "display:block");
                                                      $(".appndbtns").html("<input type='button' value='Confirm' class='cnfrmbtn' ng-click='functionnot(" + a.currentTarget.value + "," + cmbineprnt + "," + g + "," + totalhours + "," + $(a.target).attr("id") + ")'><input type='button' value='Cancel' class='cancelbtn'>");
                                                      $(a.target).addClass('Cancelfun');
                                                      cancelclick = 0;
                                                  }
                                                   else if (parseFloat(a.currentTarget.value) >12) {
                                                          $(".appendtxt").text("This is exceeding more than 12 hours for this day");
                                                          $(".blurbackgrund,.popup").attr("style", "display:block");
                                                          $(".appndbtns").html(" ");
                                                          $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
                                                          $(a.target).addClass('Cancelfun');
                                                          cancelclick = 0;
                                                          return false;
                                                     }
                      if (parseFloat(a.currentTarget.value) == 0) {
                          a.currentTarget.value = "";
                      }
                      angular.forEach(resourceavialblty, function(resa, resb) {
                          var resrceavltyobj = resa.ResourceName;
                          if (resrceavltyobj == $scope.ResourceName) {
                              if (resa.Staffing != "") {
                                  angular.forEach(resa.Staffing, function(resstfnga, restaggngb) {
                                      var dateofresourcetable = resstfnga.Day;
                                      var dateofresourcetable = dateofresourcetable.split(".");
                                      var newdateforresoucetable = new Date(dateofresourcetable[0], dateofresourcetable[1] - 1, dateofresourcetable[2]);
                                      if (newdateforresoucetable.getFullYear() == newdatefordate.getFullYear() && newdateforresoucetable.getMonth() == newdatefordate.getMonth() && newdateforresoucetable.getDate() == newdatefordate.getDate()) {
                                          if (a.currentTarget.value != "") {
                                              if (rsultdata == 1) {
                                                  return false;
                                              } else if (resstfnga.SpecialOccasion == true) {
                                                  $(".appendtxt").text(" ");
                                                  $(".appendtxt").text("This Resource is not available at this day");
                                                  $(".blurbackgrund,.popup").attr("style", "display:block");
                                                  $(".appndbtns").html(" ");
                                                  $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
                                                  $(a.target).addClass('Cancelfun');
                                                  cancelclick = 0;
                                              } else if (resstfnga.Staff == "N/A") {
                                                  a.currentTarget.value = "";
                                                  $(".appendtxt").text("This Resource is not available at this day");
                                                  $(".blurbackgrund,.popup").attr("style", "display:block");
                                                  $(".appndbtns").html("<input type='button' value='Ok' class='closebtn'>")
                                                  dataforna = 1;
                                              } else if (parseFloat(resstfnga.Staff) + parseFloat(a.currentTarget.value) > 8) {
                                                  $(a.target).addClass('Cancelfun');
                                                  if ($scope.focusdata != "") {
                                                      var recal = $scope.focusdata - parseFloat(a.currentTarget.value);
                                                      var data = parseFloat(resstfnga.Staff) - recal
                                                      totalhours = data;
                                                  } else {
                                                      var hoyrssum = parseFloat(resstfnga.Staff) + parseFloat(a.currentTarget.value);
                                                      totalhours = hoyrssum.toFixed(2);
                                                  }
                                                  if (totalhours > 8) {
                                                      $(a.target).addClass('Cancelfun');
                                                      $(".appendtxt").text("This is " + totalhours + " hours for this day");
                                                      $(".blurbackgrund,.popup").attr("style", "display:block");
                                                      $(".appndbtns").html("<input type='button' value='Confirm' class='cnfrmbtn' ng-click='functionnot(" + a.currentTarget.value + "," + cmbineprnt + "," + g + "," + totalhours + "," + $(a.target).attr("id") + ")'><input type='button' value='Cancel' class='cancelbtn'>");
                                                      $(a.target).addClass('Cancelfun');
                                                      cancelclick = 0;
                                                  }
                                                  if (totalhours > 12) {
                                                      $(a.target).addClass('Cancelfun');
                                                      $(".appendtxt").text("This is " + totalhours + " hours for this day");
                                                      $(".blurbackgrund,.popup").attr("style", "display:block");
                                                      $(".appndbtns").html(" ");
                                                      $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
                                                      $(a.target).addClass('Cancelfun');
                                                      cancelclick = 0;
                                                  }
                                              } else {
                                                  var date = g.split(".");
                                                  var cmbinedate = date[0] + "." + date[1] + "." + date[2];
                                                  validateMonthToLimitOnResourceAllocation($scope.dataval.Customers[b].Projects[c].Resources[d], parseInt(moment(cmbinedate, "DD.MM.YYYY").month()) + 1, a);
                                              }
                                          }
                                      }
                                  });
                              }
                          }
                      })
                      $(a.target).removeClass('greencolor greycolor redcolor nacolor white');
                      $scope.settingcolor(a);
                      //Validating input data entered using regular expression
                     
                      if (parseFloat(currentvalue) == 0) {
                          a.currentTarget.value = "";
                          //$(a.target).removeClass();
                      }
                      if (totalhours == "") {
                          totalhours = a.currentTarget.value;
                      }
                      var j = ""
                      $scope.resourceplanningcalc(a, cmbineprnt, g, totalhours, j)
                  }
              }
              //color coding uneversial function starts here
          $scope.settingcolor = function(a) {
                  if (parseFloat(a.currentTarget.value) == 8) {
                      $(a.target).addClass('greencolor');
                  } else if (parseFloat(a.currentTarget.value) < 8) {
                      $(a.target).addClass('greycolor');
                  } else if (parseFloat(a.currentTarget.value) > 8) {
                      $(a.target).addClass('redcolor');
                  } else if (a.currentTarget.value == "N/A") {
                      $(a.target).addClass('nacolor');
                  }
              }
              //color coding uneversial function ends here
              //function to use for plannngcaculation starts here
          $scope.resourceplanningcalc = function(a,cmbineprnt, g, h, j) {
              var cmbineparentsplit = cmbineprnt.split("/");
              var b = cmbineparentsplit[0];
              var c = cmbineparentsplit[1];
              var d = cmbineparentsplit[2];
              var currentvalue = "";
              if (typeof a === "string") {
                  currentvalue = a;
                  $scope.focusdata=j;
              } else {
                  currentvalue = a.currentTarget.value;
              }

              var uncal = 0;
              if (cancelclick != 0) {
                  if ($scope.focusdata != "") {
                      var datanull;
                      if (currentvalue == "") {
                          datanull = 0
                      } else {
                          datanull = currentvalue;
                      }
                      uncal = parseFloat(datanull) - parseFloat($scope.focusdata);
                  }
                   else {
                      var dataforelse = currentvalue;
                      if (currentvalue == "") {
                          dataforelse = 0;
                      }
                      uncal = parseFloat(dataforelse);
                      if (j != "") {
                          uncal = parseFloat(currentvalue) - parseFloat(j);
                      }
                  }
                 
                  var calclateperhour = uncal / 8;
               
                  //logic to calculate planned value for given resource
                  $scope.plannedscope = $scope.dataval.Customers[b].Projects[c].Resources[d].PlannedDays.replace(",", ".");
                  var spltpannd = parseFloat($scope.plannedscope) + calclateperhour;
             
                  $scope.unplannedscope = $scope.dataval.Customers[b].Projects[c].Resources[d].unplanne.replace(",", ".");
                  //logic to calculate unplanned value for given resource
                  var spltunplanneddays = parseFloat($scope.unplannedscope) - calclateperhour;
                  spltpannd = spltpannd.toFixed(2);
                      var spltdataaftrdot=spltpannd.split(".")
                    
                     if(parseFloat(spltdataaftrdot[1])<=1)
                      {
                      spltdataaftrdot[1]="00";
                       spltpannd=spltdataaftrdot[0]+"."+spltdataaftrdot[1];
                      }
                  spltpannd = spltpannd.toString().replace(".", ",");
                  spltunplanneddays = spltunplanneddays.toFixed(2);
                   var spltdataaftrdotun=spltunplanneddays .split(".");
                      
                        if(parseFloat(spltdataaftrdotun[1])<=1)
                      {
                      spltdataaftrdotun[1]="00";
                       spltunplanneddays =spltdataaftrdotun[0]+"."+spltdataaftrdotun[1];
                      }
                  spltunplanneddays = spltunplanneddays.toString().replace(".", ",");
                  $scope.dataval.Customers[b].Projects[c].Resources[d].PlannedDays = spltpannd;
                  $scope.dataval.Customers[b].Projects[c].Resources[d].unplanne = spltunplanneddays;
                  $scope.ResourceName = $scope.dataval.Customers[b].Projects[c].Resources[d].ResourceName;
                  var scopesolddays = $scope.dataval.Customers[b].Projects[c].Resources[d].SoldDays.replace(",", ".");
                  var scopesalesprice = $scope.dataval.Customers[b].Projects[c].Resources[d].SalesPrice.replace(",", ".");
                  spltpannd = spltpannd.replace(",", ".");
                  $scope.unplannedindays = parseFloat(scopesolddays) - parseFloat($scope.plannedscope);
                  $scope.soldreven = parseFloat(scopesalesprice) * parseFloat(scopesolddays);
                  $scope.plnndreven = parseFloat(scopesalesprice) * parseFloat(spltpannd);
                  $scope.dataval.Customers[b].Projects[c].Resources[d].plnndreven = $scope.plnndreven.toFixed(2).toString().replace(".", ",");
                  if(clickedfoedata==1)
                  {
                    $scope.$apply();
                    clickedfoedata=0;
                  }
                  //logic to populate allocation in resource allocation table
                  var date = g.split(".");
                  var cmbinedate = date[0] + "." + date[1] + "." + date[2];
                  var resurcestffng = $scope.dataval.Customers[b].Projects[c];
                  angular.forEach(resurcestffng.Resources, function(resource, i) {
                      var count = 0;
                      if (resource.ResourceName == $scope.ResourceName) {
                          angular.forEach(resource.Staffing, function(Staffingdata, i) {
                              var Staffingdate = Staffingdata.Day.split(".");
                              var newdateinput1 = new Date(date[0], date[1], date[2]);
                              var jsonnewdate1 = new Date(Staffingdate[0], Staffingdate[1], Staffingdate[2]);
                              if (newdateinput1.getFullYear() == jsonnewdate1.getFullYear() && newdateinput1.getMonth() == jsonnewdate1.getMonth() && newdateinput1.getDate() == jsonnewdate1.getDate()) {
                                  Staffingdata.Staff = "";
                              }
                          })
                      }
                  });
                  $scope.dataval.Customers[b].Projects[c].Resources[d].Staffing.push({
                      "Day": cmbinedate,
                      "Staff": currentvalue
                  });
              }
              if (cancelclick != 0) {
                  $(".totalforcalndr").remove();
                  $(".totalforcalndr,.totalplannedandun").each(function(no) {
                      $(this).find("td").each(function(no1) {
                          $(this).remove();
                      });
                  });
                  $scope.calculationandconvertion();
                  totalcaluculation();
                  var value;
                  if (currentvalue == "") {
                      value = 0;
                  } else {
                      value = parseFloat(currentvalue);
                  }
                  var date = cmbinedate;
                  var cmbinedataformnth = cmbinedate.split(".");
                  var objctformnth = $scope.dataval.Customers[b].Projects[c].Resources[d].MonthToOppLineItemIdMap;
                  var mnthtolmt;
                  for (var key in objctformnth) {
                      if (cmbinedataformnth[1] == key) {
                          mnthtolmt = objctformnth[key];
                      }
                  }
                  $(".Cancelfun").removeClass("Cancelfun");
                Visualforce.remoting.Manager.invokeAction(
                      '{!$RemoteAction.CtrPSOTable.savefunction}',
                      mnthtolmt, date, value,
                      function(result, event) {
                      }, {
                          escape: true
                      }
                  );
              }
          }
          $scope.Statatical = function() {
     
                  $(".statical").each(function() {
                      var jsondata = $(this).text();
                      if (jsondata != "[]"  && jsondata != "" ) {
                          var th = $(this);
                          var jsonstrngfy = JSON.parse(jsondata);
                          $.each(jsonstrngfy, function(a, b) {
                              $(th).parent().find(".drdot").each(function() {
                                  var newdateinput = $(this).attr("name");
                                   if (b.Day == "Week") {
                                  if (parseInt(b.wmno) == parseInt(newdateinput)) {
                                      $(this).val(b.Days);
                                  }
                                  }
                              });
                              $(th).parent().find(".mwdrdot").each(function() {
                                  var newdateinput = $(this).attr("name");
                                  if (b.Day == "MWeek") {
                                      if (parseInt(b.wmno) == parseInt(newdateinput)) {
                                          $(this).val(b.Days);
                                      }
                                  }
                              });
                              $(th).parent().find(".mwdadot").each(function() {
                                  var newdateinput = $(this).attr("name");
                                  if (b.Day == "MWeek") {
                                      if (parseInt(b.wmno) == parseInt(newdateinput)) {
                                          $(this).val(b.Revenue);
                                      }
                                  }
                              });
                              $(th).parent().find(".dadot").each(function() {
                                  var newdateinput = $(this).attr("name");
                                   if (b.Day == "Week") {
                                  if (parseInt(b.wmno) == parseInt(newdateinput)) {
                                      $(this).val(b.Revenue);
                                  }
                                  }
                              })
                              $(th).parent().find(".mdadot").each(function() {
                                  var newdateinput = $(this).attr("name");
                                  if (b.Day == "Month") {
                                      if (parseInt(b.wmno) == parseInt(newdateinput) - 1) {
                                          $(this).val(b.Revenue);
                                      }
                                  }
                              })
                              $(th).parent().find(".mdrdot").each(function() {
                                  var newdateinput = $(this).attr("name");
                                  if (b.Day == "Month") {
                                      if (parseInt(b.wmno) == parseInt(newdateinput) - 1) {
                                          $(this).val(b.Days);
                                      }
                                  }
                              })
                          })
                      }
                      $(".drdot,.dadot,.mdrdot,.mdadot,.mwdrdot,.mwdadot").each(function() {
                          if ($(this).val() == "") {
                              $(this).val("-/-");
                          }
                      })
                  })
              }
              //function for populating Staffing array in inputs
          $scope.Staffingpopltion = function() {
                  $(".Staffing").each(function() {
                      var jsondata = $(this).text();
                      if (jsondata != "[]") {
                          var th = $(this);
                          var jsonstrngfy = JSON.parse(jsondata);
                          $.each(jsonstrngfy, function(a, b) {
                              $(th).parent().find(".inputfields").each(function() {
                                  var newdateinput = $(this).attr("name");
                                  var splitnewdateinput = newdateinput.split(".");
                                  var combinenewdateinput = splitnewdateinput[0] + "-" + splitnewdateinput[1] + "-" + splitnewdateinput[2];
                                  var jsonnewdate = b.Day;
                                  var splitjsonnewdate = jsonnewdate.split(".");
                                  var combinejsonnewdate = splitjsonnewdate[0] + "-" + splitjsonnewdate[1] + "-" + splitjsonnewdate[2];
                                  var newdateinput1 = new Date(splitnewdateinput[0], parseInt(splitnewdateinput[1]) - 1, splitnewdateinput[2]);
                                  var jsonnewdate1 = new Date(splitjsonnewdate[0], parseInt(splitjsonnewdate[1]) - 1, splitjsonnewdate[2]);
                                  if (newdateinput1.getFullYear() == jsonnewdate1.getFullYear() && newdateinput1.getMonth() == jsonnewdate1.getMonth() && newdateinput1.getDate() == jsonnewdate1.getDate()) {
                                      $(this).removeClass('greencolor greycolor redcolor nacolor white');
                                      if (parseFloat(b.Staff) == 0) {
                                          b.Staff = "";
                                      }
                                      $(this).val(b.Staff);
                                      if (b.SpecialOccasion == true) {
                                          $(this).attr("disabled", "true");
                                          $(this).addClass("holiday");
                                      }
                                      else if (parseFloat(b.Staff) == 8) {
                                          $(this).addClass("greencolor");
                                      }
                                      else if (parseFloat(b.Staff) < 8) {
                                          $(this).addClass("greycolor");
                                      }
                                      else if (parseFloat(b.Staff) > 8) {
                                          $(this).addClass("redcolor");
                                      }
                                      else if (b.Staff == "N/A") {
                                          $(this).addClass("nacolor");
                                      }
                                  }
                              })
                          })
                      }
                  })
              }
              //Filtering of projects based on customer selection
          $scope.Customersfilter = function(ab) {
              var countforfilterdata = 0;
              if (typeof $scope.dataforfilter !== "undefined") {
                  $(".table2").each(function(co) {
                      var a = $(this).find("thead tr th").height();
                      if ($(this).attr("id") != "lasttable") {
                          $(".table1").each(function(co1) {
                              if (co == co1) {
                                  $(this).find("thead tr th").attr("style", "height:" + a + "px;padding:1px !important");
                              }
                          })
                      }
                  })
                  var a = $("#lasttable thead tr th").height() + 1;
                  var paddg = $("#lasttable thead tr th").css("padding");
                  $("#resourcetable thead tr th").attr("style", "height:" + a + "px;padding:" + paddg + "!important;");
                  var tda = $("#lasttable  tr td").height();
                  var tdpaddg = $("#lasttable  tr td").css("padding");
                  angular.forEach($scope.dataforfilter.Customers, function(Customers, i) {
                      if (Customers.AccountName == ab.value) {
                          countforfilterdata = countforfilterdata + 1;
                      }
                  });
              } else {
                  countforfilterdata = 1;
              }
              if (ab.value == "All Account Names") {
                  countforfilterdata = 1;
              }
              if (countforfilterdata > 0) {
                  var projects1 = new Array();
                  projects1.push({
                      "value": "All Opportunity Names"
                  })
                  angular.forEach(newthing, function(a, b) {
                      if (a.customer == ab.value) {
                          angular.forEach(a.project, function(an, b) {
                              projects1.push({
                                  "value": an.name
                              });
                          })
                      } else if (ab.value == "All Account Names") {
                          angular.forEach(a.project, function(an, b) {
                              projects1.push({
                                  "value": an.name
                              });
                          })
                      }
                  })
                  $scope.projectsselect = "";
                  $scope.projectsselect = projects1;
                  if (ab.value == "All Account Names") {
                      var projects1 = _.unique(projects1, false, function(item, k, v) {
                          return item.value;
                      });
                      $scope.projectsselect = projects1;
                  }
                  $scope.projectsSelecteddata = $scope.projectsselect[0];
                  $(".filterclass").attr("style", "display:block");
                  $(".maintable").attr("style", "display:none");
                  $("#contid table").each(function() {
                      $(this).removeClass("hidedata");
                      $(this).next().removeClass("hidedata");
                  })
                  if (ab.value != "All Account Names") {
                      $(".customername").each(function() {
                          if ($(this).text() != ab.value) {
                              $(this).parent().parent().parent().addClass("hidedata");
                              $(this).parent().parent().parent().next().addClass("hidedata");
                          }
                      })
                  }
                  var widthdy = $(".custvalues").width();
                  $("#resourcetable").attr("style", "width:" + widthdy + "px");
              } else {
                  $(".appendtxt").text(" ");
                  $(".appendtxt").append("No results are available for the filtering.")
                  $(".popup,.blurbackgrund").attr("style", "display:block");
                  $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
              }
          }
              //filtering of table based on input selection
          $scope.projects = function(ab1) {
              var countforfilterdata = 0;
              if (typeof $scope.dataforfilter !== "undefined") {
                  $(".table2").each(function(co) {
                      var a = $(this).find("thead tr th").height();
                      if ($(this).attr("id") != "lasttable") {
                          $(".table1").each(function(co1) {
                              if (co == co1) {
                                  $(this).find("thead tr th").attr("style", "height:" + a + "px;padding:1px !important");
                              }
                          })
                      }
                  })
                  var a = $("#lasttable thead tr th").height() + 1;
                  var paddg = $("#lasttable thead tr th").css("padding");
                  $("#resourcetable thead tr th").attr("style", "height:" + a + "px;padding:" + paddg + "!important;");
                  var tda = $("#lasttable  tr td").height();
                  var tdpaddg = $("#lasttable  tr td").css("padding");
                  angular.forEach($scope.dataforfilter.Customers, function(Customers, i) {
                      angular.forEach(Customers.Projects, function(projectss, i) {
                          if (projectss.OpportunityName == ab1.value) {
                              countforfilterdata = countforfilterdata + 1;
                          }
                      });
                  });
              } else {
                  countforfilterdata = 1;
              }
              if (ab1.value == "All Opportunity Names") {
                  countforfilterdata = 1;
              }
              if (countforfilterdata > 0) {
                  if (ab1.value != "All Opportunity Names") {
                      $(".prjname").each(function() {
                          if ($(this).text() == ab1.value && $(this).parent().parent().find(".customername").text() == $scope.persons[parseInt($(".Customers").val())].value) {
                              $(this).parent().parent().parent().removeClass("hidedata");
                              $(this).parent().parent().parent().next().removeClass("hidedata");
                          } else {
                              $(this).parent().parent().parent().addClass("hidedata");
                              $(this).parent().parent().parent().next().addClass("hidedata");
                          }
                      })
                  } else {
                      $(".prjname").each(function() {
                          if ($(this).parent().parent().find(".customername").text() == $scope.persons[parseInt($(".Customers").val())].value) {
                              $(this).parent().parent().parent().removeClass("hidedata");
                              $(this).parent().parent().parent().next().removeClass("hidedata");
                          } else {
                              $(this).parent().parent().parent().addClass("hidedata");
                              $(this).parent().parent().parent().next().addClass("hidedata");
                          }
                      })
                  }
                  if ($scope.persons[parseInt($(".Customers").val())].value == "All Account Names") {
                      $(".hdng table").each(function() {
                          $(this).removeClass("hidedata");
                          $(this).next().removeClass("hidedata");
                      })
                      $(".prjname").each(function() {
                          if ($(this).text() != ab1.value) {
                              var a = ab1.value;
                              $(this).parent().parent().parent().addClass("hidedata");
                              $(this).parent().parent().parent().next().addClass("hidedata");
                          }
                      })
                  }
                  if ($scope.persons[parseInt($(".Customers").val())].value == "All Account Names" && ab1.value == "All Opportunity Names") {
                      $(".hdng table").each(function() {
                          $(this).removeClass("hidedata");
                          $(this).next().removeClass("hidedata");
                      })
                  }
                  var widthdy = $(".custvalues").width();
                  $("#resourcetable").attr("style", "width:" + widthdy + "px");
              } else {
                  $(".appendtxt").text(" ");
                  $(".appendtxt").append("No results are available for the filtering.")
                  $(".popup,.blurbackgrund").attr("style", "display:block");
                  $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
              }
          }
          $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {
              var widthdy = $(".custvalues").width();
              $("#resourcetable").attr("style", "width:" + widthdy + "px");
              //Controller Ends Here
              //Functions of angularjs when is in document ready Starts here
              //date picker plugin starts here
              $('.strtdateinput').datepicker({
                  changeMonth: true,
                  changeYear: true,
                  showButtonPanel: true,
                  dateFormat: 'MM YY',
                  minDate: -180,
                  maxDate: +180,
                  currentText: "Today:" + $.datepicker.formatDate('MM dd yy', new Date())
              }).focus(function() {
                  var thisCalendar = $(this);
                  $('.ui-datepicker-calendar').detach();
                  $('.ui-datepicker-close').click(function() {
                      var month = $("#ui-datepicker-div .ui-datepicker-month :selected").val();
                      var year = $("#ui-datepicker-div .ui-datepicker-year :selected").val();
                      $(".setstrtdateinput").val(parseInt(month) + 1 + " " + year);
                  });
              });
              //calculations for projectwise totals
              $scope.calculationandconvertion();
              $scope.headerpop = function() {
                  var strtdate = startdateobj.StartDate;
                  var enddate = startdateobj.EndDate;
                  var inputsplit = strtdate.split(".");
                  var splitstrtdate = strtdate.split(".");
                  var splitenddate = enddate.split(".");
                  $(".enddateinput").val(splitenddate[0] + "-" + splitenddate[1] + "-" + splitenddate[2]);
                  //differnce between startdate and end date starts
                  var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
                  var firstDate = new Date(splitenddate[2], parseInt(splitenddate[1]) - 1, splitenddate[0]);
                  var secondDate = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
                  var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
                  //differnce between startdate and end date ends
                  var date = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
                  var date1 = new Date(splitenddate[2], parseInt(splitenddate[1]) - 1, splitenddate[0]);
                  var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                  $(".strtdateinput").val(monthNames[parseInt(inputsplit[1]) - 1] + " " + inputsplit[2]);
                  var date = new Date(splitstrtdate[2], parseInt(splitstrtdate[1]) - 1, splitstrtdate[0]);
                  var heade;
                  var tableheade = "";
                  var day = date.getDay();
                  var date1 = parseInt(date.getDate());
                  var year = parseInt(date.getFullYear());
                  var month = parseInt(date.getMonth()) + 1;
                  if (day == 0) {
                      day = 7;
                  }
                  var k = parseInt(day);
                  var lp = leapYear(year);
                  var dt;
                  dt = date1;
                  for (j = 0; j <= parseInt(diffDays); j++) {
                      if (month == 2) {
                          if (lp) {
                              if (dt == 30) {
                                  dt = 1;
                                  month = month + 1;
                              }
                          } else {
                              if (dt == 29) {
                                  dt = 1;
                                  month = month + 1;
                              }
                          }
                      }
                      if (month == 4 || month == 6 || month == 9 || month == 11) {
                          if (dt == 31) {
                              dt = 1;
                              month = month + 1;
                          }
                      }
                      if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
                          if (month == 12) {
                              if (dt == 32) {
                                  dt = 1;
                                  month = 1;
                                  year = year + 1;
                              }
                          } else if (dt == 32) {
                              dt = 1;
                              month = month + 1;
                          }
                      }
                      var cmbne = month + "-" + dt + "-" + year;
                      var weekno = moment(cmbne, "MM-DD-YYYY").startOf('isoweek').week();
                      if (j == 0) {
                          if (k <= 4 || k == 7) {
                              if (weekdays[k] == "SU") {
                                  if (dt == 1) {
                                      heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;' class='weekhead' ><span class='emptyclass'>" + monthNames[month - 1] + "</span><br/><span class='spanbirder' style='padding: 0% 6px 0 6px !important;border-right:1px solid #B8B1B1;'>KW-" + weekno + "</span><br/><span style='border-right:1px solid #B8B1B1;padding:0px 12px 0px 12px;'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th>";
                                  } else {
                                      heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;' class='weekhead' ><span class='emptyclass'></span></br><span class='spanbirder' style='padding: 0% 3px 0 3px !important;border-right:1px solid #B8B1B1;'>KW-" + weekno + "</span><br/><span style='border-right:1px solid #B8B1B1;padding:0px 9px 0px 9px;'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th>";
                                  }
                              } else {
                                  if (dt == 1) {
                                      heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;' class='weekhead' ><span class='emptyclass'>" + monthNames[month - 1] + "</span><br/><span class='spanbirder' style='padding: 0% 3px 0 3px !important;'>KW-" + weekno + "</span><br/><span >" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                                  } else {
                                      heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;' class='weekhead' ><span class='emptyclass'></span></br><span class='spanbirder' style='padding: 0% 3px 0 3px !important;'>KW-" + weekno + "</span><br/><span >" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                                  }
                              }
                          } else {
                              if (dt == 1) {
                                  heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;' class='weekhead' ><span class='emptyclass'>" + monthNames[month - 1] + "</span><br/><span class='spanbirder' style='padding: 0% 3px 0 3px !important;border-right:1px solid #B8B1B1;'>KW-" + weekno + "</span><br/><span style='border-right:1px solid #B8B1B1;padding:0px 12px 0px 12px;'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                              }
                          }
                      } else if (j == parseInt(diffDays)) {
                          heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;' class='weekhead' ><br/><span class='spanbirder' style='padding: 0% 3px 0 3px !important;'>KW-" + weekno + "</span><br/><span >" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th>";
                      } else if (weekdays[k] == "MO") {
                          if (dt == 1) {
                              heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border:0;' class='weekhead' ><span class='emptyclass' style='border-bottom: 1px solid #B8B1B1;padding: 0px 6px 0px 0px;'>" + monthNames[month - 1] + "</span><span class='spanbirder' style='padding: 0px;'></span><br/><br/><span class='brdrdtls' style='  border-top: 1px solid #B8B1B1;padding: 0px 2px 0px 4px;'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                          } else {
                              heade = heade + "<th style='text-align:center;border:0;' class='weekhead' ><span class='emptyclass'></span></br><span class='spanbirder'></span><br/><span class='brdrdtls' >" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                          }
                      } else if (weekdays[k] == "WE") {
                          if (dt == 1) {
                              heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:left;border:none;' class='weekhead' ><span class='emptyclass'>" + monthNames[month - 1] + "</span><br/><span class='spanbirder' style='padding: 0 0px 0 0px;'>KW-" + weekno + "</span><br/><span class='wd'>" + weekdays[k] + '<br/><span class="wd1">' + dt + "</span></th>";
                          } else {
                              heade = heade + "<th style='text-align:left;border:none;' class='weekhead' ><span class='emptyclass'></span></br><span class='spanbirder' style='padding: 0 0px 0 0px;'>KW-" + weekno + "</span><br/><span class='wd'>" + weekdays[k] + '<br/><span class="wd1">' + dt + "</span></th>";
                          }
                      } else if (weekdays[k] == "SU") {
                          if (dt == 1) {
                              heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border:0;' class='weekhead' ><span class='emptyclass' style='border-bottom: 1px solid #B8B1B1;padding: 0px 6px 0px 0px;'>" + monthNames[month - 1] + "</span><span class='spanbirder' style='padding: 0px;'></span><br/><br/><span class='brdrdtls' style='  border-top: 1px solid #B8B1B1;padding: 0px 2px 0px 4px;'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th>";
                          } else {
                              heade = heade + "<th style='text-align:center;border:0;' class='weekhead' ><span class='emptyclass'></span></br><span class='spanbirder' style='border-right:1px solid #B8B1B1;'></span><br/><span class='brdrdtls' >" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th>";
                          }
                      } else {
                          if (dt == 1) {
                              heade = heade + "<th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>D.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:center;border-right:0;padding:0;border-top:none;border:none;' class='weekhead' ><p style='border-top: 1px solid #BBB4B4;border-right: 1px solid #BBB4B4;margin: 0px;'>R.</p><span style='border-right: 1px solid #BBB4B4;padding: 5px 33px 18px 0px;'></span></th><th style='text-align:left;border:none;' class='weekhead' ><span class='emptyclass'>" + monthNames[month - 1] + "</span><br/><span class='spanbirder'></span><br/><span class='brdrdtls'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                          } else {
                              heade = heade + "<th style='text-align:left;border:none;' class='weekhead' ><span class='emptyclass'></span></br><span class='spanbirder'></span><br/><span class='brdrdtls'>" + weekdays[k] + '</span><br/><span class="brdrdtls1"> ' + dt + "</span></th>";
                          }
                      }
                      tableheade = tableheade + "<p style='float:left;'>" + weekdays[k] + '<br/> ' + dt + "/" + month + "/" + year + "</p>";
                      dt++;
                      if (k % 7 == 0) {
                          k = 1;
                      } else {
                          k++;
                      }
                  }
                  $(".workingweeks thead th").each(function(a) {
                      if (parseInt(a) >= 1) {
                          $(this).remove();
                      }
                  })
                  $(".table2 table thead tr").append(heade);
                  $(".table2 .one").append(tableheade);
              }
              $scope.headerpop();
              $(".table2").each(function() {
                  $(this).find("tr").each(function() {
                      $(this).find(".weekhead").each(function(cu) {
                          if (cu <= 3) {
                              $(this).remove();
                          }
                      })
                  })
              })
              angular.element(document.getElementById('contid')).scope().Staffingpopltion();
              $(".resourcetable").each(function() {
                  $(this).find("td").each(function(a) {
                      $(this).find("input").attr("disabled", "true");
                      if (parseInt(a) <= 3) {
                          $(this).remove();
                      }
                  })
              })
              //calender total caluculation
              totalcaluculation();
              //previous month's data read only @ 4 AM Germany time on 1st of corresponding month
             $scope.disablinginputs();
              
              $(".table2").each(function() {
                  $(this).find("tr").each(function() {
                      $(this).find(".mwdrdot").each(function(cu) {
                          if (cu == 0) {
                              $(this).parent().remove();
                          }
                      })
                      $(this).find(".mdadot").each(function(cu) {
                          if (cu == 0) {
                              $(this).parent().remove();
                          }
                      })
                      $(this).find(".mdrdot").each(function(cu) {
                          if (cu == 0) {
                              $(this).parent().remove();
                          }
                      })
                      $(this).find(".mwdadot").each(function(cu) {
                          if (cu == 0) {
                              $(this).parent().remove();
                          }
                      })
                    
                  })
              })
              var j = jQuery.noConflict();
              (function(j) {
                  j(document).ready(function() {
                      // Connect to the CometD endpoint
                      $.cometd.init({
                          url: window.location.protocol + '//' + window.location.hostname + '/cometd/23.0/',
                          requestHeaders: {
                              Authorization: 'OAuth {!$Api.Session_ID}'
                          }
                      });
                      // Subscribe to a topic. JSON-encoded update will be returned
                      // in the callback
                      $.cometd.subscribe('/topic/ResourceChanges', function(message) {
                          var pushtopic = message;
                          var valueforcell;
                          var datefr = pushtopic.data.sobject.Scheduled_Date__c;
                          var datefromjson = datefr.split("T");
                          if (pushtopic.data.sobject.Event__c == "Update" || pushtopic.data.sobject.Event__c == "Insert" || pushtopic.data.sobject.Event__c == "Delete") {
                              valueforcell = parseFloat(pushtopic.data.sobject.New_value__c) - parseFloat(pushtopic.data.sobject.Old_value__c)
                          }
                        
                          $(".workingweeks .contactidloop").each(function() {
                              if ($(this).text().trim() == pushtopic.data.sobject.ContactId__c) {
                                  $(this).parent().find(".inputfields").each(function() {
                                      var newdateinput = $(this).attr("name");
                                      var splitnewdateinput = newdateinput.split(".");
                                      var combinenewdateinput = splitnewdateinput[0] + "-" + splitnewdateinput[1] + "-" + splitnewdateinput[2];
                                      var jsonnewdate = datefromjson[0];
                                      var splitjsonnewdate = jsonnewdate.split("-");
                                      var combinejsonnewdate = splitjsonnewdate[0] + "-" + splitjsonnewdate[1] + "-" + splitjsonnewdate[2];
                                      var newdateinput1 = new Date(splitnewdateinput[2], parseInt(splitnewdateinput[1]) - 1, splitnewdateinput[0]);
                                      var jsonnewdate1 = new Date(splitjsonnewdate[0], parseInt(splitjsonnewdate[1]) - 1, splitjsonnewdate[2]);
                                   if (newdateinput1.getFullYear() == jsonnewdate1.getFullYear() && newdateinput1.getMonth() == jsonnewdate1.getMonth() && newdateinput1.getDate() == jsonnewdate1.getDate()) {
                                          var prsnt;
                                          if ($(this).val() == "") {
                                              prsnt = 0;
                                          } else {
                                              prsnt = $(this).val();
                                          }
                                          var vl = parseFloat(prsnt) + valueforcell * 8;
                                          if (vl == 0) {
                                              vl = "";
                                          }
                                          $(this).val(vl);
                                          var colorvl = $(this).val();
                                          $(this).removeClass('greencolor greycolor redcolor nacolor white');
                                          if (parseFloat(colorvl) == 8) {
                                              $(this).addClass('greencolor');
                                          }
                                          if (parseFloat(colorvl) < 8) {
                                              $(this).addClass('greycolor');
                                          }
                                          if (parseFloat(colorvl) > 8) {
                                              $(this).addClass('redcolor');
                                          }
                                          if (colorvl == "N/A") {
                                              $(this).addClass('nacolor');
                                          }
                                          angular.forEach($scope.dataval.Resources, function(resource, i) {
                                              if (resource.ContactId == pushtopic.data.sobject.ContactId__c) {
                                                  if (resource.Staffing != "") {
                                                      var count = 0;
                                                      angular.forEach(resource.Staffing, function(sttfng, i) {
                                                          var jsonnewdate = sttfng.Day;
                                                          var splitjsonnewdate = jsonnewdate.split(".");
                                                          var combinejsonnewdate = splitjsonnewdate[0] + "-" + splitjsonnewdate[1] + "-" + splitjsonnewdate[2];
                                                          var newdateinput1 = new Date(splitnewdateinput[2], parseInt(splitnewdateinput[1]) - 1, splitnewdateinput[0]);
                                                          var jsonnewdate1 = new Date(splitjsonnewdate[2], parseInt(splitjsonnewdate[1]) - 1, splitjsonnewdate[0]);
                                                          if (newdateinput1.getFullYear() == jsonnewdate1.getFullYear() && newdateinput1.getMonth() == jsonnewdate1.getMonth() && newdateinput1.getDate() == jsonnewdate1.getDate()) {
                                                              sttfng.Staff = vl;
                                                              count = count + 1;
                                                          }
                                                      });
                                                  } else {
                                                      resource.Staffing.push({
                                                          "Day": newdateinput,
                                                          "SpecialOccasion": "true",
                                                          "Staff": vl
                                                      });
                                                  }
                                                  if (count == 0) {
                                                      resource.Staffing.push({
                                                          "Day": newdateinput,
                                                          "SpecialOccasion": "true",
                                                          "Staff": vl
                                                      });
                                                  }
                                              }
                                          });
                                      }
                                  })
                              }
                          })
                      });
                  });
              })(j)
              $scope.Statatical();
          })
      });
  });
  function totalcaluculation() {
          $(".inputbdy").each(function() {
              var count = 0;
              var bdythis = $(this);
              var txtx = "";
              $(this).find("tr:first-child .inputfields").each(function() {
                  count = count + 1;
                  var a = $(this).attr("name");
                  var splita=a.split(".");
            
               var b=parseInt(a);
               var valuee = 0;
               if(splita.length>1)
               {
               $(bdythis).find("tr td input[name='"+a+"']").each(function() {
               
               var valueofdata=parseInt(a);
               if ($(this).val()!= "") {
                   valuee = valuee + parseFloat($(this).val());
                   }
                   })
                   }
                  else
                   {
                                  valuee = 0;
                   }
                   
                   
                   
                              
                          txtx = txtx + "<td>" + valuee + "</td>";


              });
              $(this).find(".totalforcalndr").append(txtx);
          });
      }
      //utility functions defined for this page
      //function Europen number caluculation
  function euroconverter(number) {
          var numberStr = parseFloat(number).toFixed(2).toString();
          var numFormatDec = numberStr.slice(-2); /*decimal 00*/
          numberStr = numberStr.substring(0, numberStr.length - 3); /*cut last 3 strings*/
          var numFormat = new Array;
          while (numberStr.length > 3) {
              numFormat.unshift(numberStr.slice(-3));
              numberStr = numberStr.substring(0, numberStr.length - 3);
          }
          numFormat.unshift(numberStr);
          return numFormat.join('.') + ',' + numFormatDec; /*format 000.000.000,00 */
      }
      //function for leapyear caluclation
  function leapYear(year) {
          return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);
      }
      //function for colorsetting
  function colorcoding() {
          $(".Cancelfun").removeClass('greencolor greycolor redcolor nacolor white');
          if ($(".Cancelfun").val() == "8") {
              $(".Cancelfun").addClass("greencolor");
          }
          else if (parseFloat($(".Cancelfun").val()) < 8) {
              $(".Cancelfun").addClass("greycolor");
          }
          else if (parseFloat($(".Cancelfun").val()) > 8) {
              $(".Cancelfun").addClass("redcolor");
          }
          else if ($(".Cancelfun").val() == "N/A") {
              $(".Cancelfun").addClass("nacolor");
          }
          else if ($(".Cancelfun").val() == "") {
              $(".Cancelfun").addClass("white");
          }
          $(".Cancelfun").removeClass('Cancelfun');
      }
      //function for close button
  $(document).on("click", ".closebtn", function() {
      $(".blurbackgrund,.popup").attr("style", "display:none");
      dataforna = 0;
  });
  //function for confrom button
  $(document).on("click", ".cnfrmbtn", function() {
      $(".Cancelfun").removeClass("Cancelfun");
      $(".blurbackgrund,.popup").attr("style", "display:none");
      clickedfoedata = 1;
      var splitdata = $(this).attr("ng-click").split("(");
      cancelclick = 1;
      var dataforbracket = splitdata[1].split(")");
      var splitbycomma = dataforbracket[0].split(",");
      var a = splitbycomma[0];
      var b = splitbycomma[1];
      var c = splitbycomma[2];
      var d = splitbycomma[3];
      var e = splitbycomma[4];
      angular.element(document.getElementById('contid')).scope().resourceplanningcalc(a, b, c, d, e);
      colorcoding();
  });
  //function for confrom button ends here
  //function for cancel button starts here
  $(document).on("click", ".cancelbtn", function() {
      $(".blurbackgrund,.popup").attr("style", "display:none");
      $(".Cancelfun").val($('.Cancelfun').attr('id'));
      cancelclick = 1;
      colorcoding();
      $(".Cancelfun").removeClass("Cancelfun");
  });
  /*
  @changedResource the corresponding changed nested resource object extracted from dataset and
  @resourceChangedForMonth the integer value for the month it has been changed eg Jan-1 , Feb-2.. so on..
  */
  function validateMonthToLimitOnResourceAllocation(changedResource, resourceChangedForMonth, a) {
    
      $(".dataforprint").text(changedResource.Staffing)
      var resourceStaffingForSelectedMonthRange = changedResource.Staffing;
      var staffingForChangedMonth = _.filter(resourceStaffingForSelectedMonthRange, function(eachStaffingItem) {
          return parseFloat(moment(eachStaffingItem["Day"], "DD.MM.YYYY").month()) + 1 === resourceChangedForMonth;
      });
      var staffedDayListOfChangedMonth = _.pluck(staffingForChangedMonth, 'Staff');
      var totalStaffingHoursForChangedMonth = _.reduce(staffedDayListOfChangedMonth, function(totalStaffing, staffingHoursForEachAllocatedDay) {
      
          if (staffingHoursForEachAllocatedDay == "" || typeof staffingHoursForEachAllocatedDay === "undefined") {
          
              staffingHoursForEachAllocatedDay = 0;
            
          }
          if (totalStaffing == "") {
              totalStaffing = 0;
          }
          return totalStaffing + parseFloat(staffingHoursForEachAllocatedDay);
      }, 0);

      var monthtlyLimitHours = parseFloat(changedResource.MonthToLimitMap[resourceChangedForMonth]) * 8;
    
      if (a.currentTarget.value == "") {
          a.currentTarget.value = 0;
      }
      var updatedata = 0;
      var ab = $(a.target).attr("id");
      if (ab != "" && a.currentTarget.value != "") {
          updatedata = parseFloat(a.currentTarget.value) - parseFloat(ab);
          totalStaffingHoursForChangedMonth = totalStaffingHoursForChangedMonth + updatedata;
      } else {
          totalStaffingHoursForChangedMonth = totalStaffingHoursForChangedMonth + parseFloat(a.currentTarget.value)
      }
         if (a.currentTarget.value != 0) {
      if (_.has(changedResource.MonthToLimitMap, resourceChangedForMonth.toString())) {
          if (parseFloat(totalStaffingHoursForChangedMonth) / 8 > parseFloat(monthtlyLimitHours / 8)) {
              $(".appendtxt").text(" ");
              $(".appendtxt").append(changedResource.ResourceName + "s Allocation of " + totalStaffingHoursForChangedMonth + " Hours exceeds Month Limit of" + monthtlyLimitHours + " Hours")
              $(".popup,.blurbackgrund").attr("style", "display:block");
              $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
              cancelclick = 0;
              $(a.target).addClass('Cancelfun');
              return 1;
          }
      }

         
       else {
          $(".appendtxt").text(" ");
          $(".appendtxt").append("" + changedResource.ResourceName + " is not available for the month.")
           $(".popup,.blurbackgrund").attr("style", "display:block");
          $(".appndbtns").html("<input type='button' value='Cancel' class='cancelbtn'>");
          cancelclick = 0;
          $(a.target).addClass('Cancelfun');
          return 1;
      }
    }
  }
        </script>
    </head>
    <body data-ng-app="myApp">
          <p class="dataforprint" style="display:;"> </p>
        <div data-ng-controller="MyCtrl" id="contid">
            <div class="blurbackgrund"></div>
            <div class="popup">
                <div class="header"></div>
                <div><p class="appendtxt"></p></div>
                <div class="footer"><div class="appndbtns"></div></div>
            </div>
            <table class="custdetails">
                <tr>
                    <td>Account Name:</td>
                    <td>
                    <select class="Customers" data-ng-model="blisterPackTemplateSelected" data-ng-change="Customersfilter(blisterPackTemplateSelected)"  data-ng-options="persons as persons.value for persons in persons" > </select>
                </td>
            </tr>
            <tr>
                <td>Opportunity Name:</td>
            <td><select class="Projects" data-ng-model="projectsSelecteddata" data-ng-change="projects(projectsSelecteddata)"  data-ng-options="projectsselect as projectsselect.value for projectsselect in projectsselect"> </select>
        </td>
    </tr>
    <tr>
        <td>Start Month :</td>
        <td><input type="text" class="strtdateinput" /><input type="text" class="setstrtdateinput" style="display:none;"/></td>
    </tr>
</table>
<div class="hdng">
    <div class="custdisplay">
        <div data-ng-repeat="dataval in dataval.Customers" class="custvalues" on-finish-render="ngRepeatFinished">
            <div data-ng-repeat="dataval1 in dataval.Projects" >
                <table  class="custdetailview">
                    <tr><td  style="text-align:left;width:110px;">Account Name:</td><td style="text-align:center;" class="customername">{{dataval.AccountName}}</td></tr>
                    <tr><td  style="text-align:left;">Opportunity Name :</td><td  style="text-align:center;" class="prjname">{{dataval1.OpportunityName}}</td></tr>
                    <tr><td  style="text-align:left;">Project Manager :</td><td  style="text-align:center;">{{dataval1.OurProjectManager}}</td></tr>
                </table>
                <div  class="Resourcesection" >
                    <div >
                        <table class="table1">
                            <tr>
                                <thead>
                                    <th >Resource<br/> Name</th><th >Product</th><th >Sold Days</th><th>Planned Days</th><th>Un Planned Days</th>
                                </thead>
                            </tr>
                            <tbody class="totalscalc">
                                <tr data-ng-repeat="dataval2 in dataval1.Resources">
                                    <td class="resource">{{dataval2.ResourceName}}</td><td>{{dataval2.Product}}</td>    <td class="noplan">{{dataval2.PlannedDays}}</td><td>{{dataval2.SoldDays}}</td> <td class="unplannedhrs">{{dataval2.LastModifiedDate}}</td><td>{{dataval2.PlannedDays}}</td> <td>{{dataval2.unplanne }}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="clearfix"></div>
        <h1 style="position:relative;top:20px;">Resource Availability</h1>
        <div class="clearfix"></div>
        <table class="table1" id="resourcetable">
            <tr>
                <thead>
                    <th >Resource Name</th>
                    <!--
                    <th >Role</th> <th > Sold days</th><th >Planned Days<br/> days</th><th >Unplanned <br/>days</th><th >Latest<br/> Modification</th>-->
                </thead>
            </tr>
            <tr data-ng-repeat="dataval2 in dataval.Resources">
                <td>{{dataval2.ResourceName}}</td>
                <!--
                <td class="" >{{dataval2.SpecialOccasion}}</td><td >{{dataval2.SoldDays}}</td><td class="" ></td><td ></td><td class="" ></td>-->
            </tr>
        </table>
    </div>
    <div class="weekspresence" >
        <div class="weekpresencedata">
            <div data-ng-repeat="dataval in dataval.Customers">
                <div data-ng-repeat="dataval1 in dataval.Projects" >
                    <table  class="hiddentable custdetailview">
                        <tr><td  style="text-align:left;width:110px;">Account Name:</td><td style="text-align:center;" class="customername">{{dataval.AccountName}}</td></tr>
                        <tr><td  style="text-align:left;">Opportunity Name :</td><td  style="text-align:center;" class="prjname">{{dataval1.OpportunityName}}</td></tr>
                        <tr><td  style="text-align:left;">Project Manager :</td><td  style="text-align:center;">{{dataval1.OurProjectManager}}</td></tr>
                    </table>
                    <div class="table2" >
                        <table >
                            <tr>
                                <thead>
                                    <tr> <th>Sales Price</th><th>Sold Rev.</th><th>Planned Rev.</th><th>Latest Mod.</th></tr>
                                </thead>
                            </tr>
                            <tbody class="inputbdy">
                                <tr class="tbody1 dsplyhde" data-ng-repeat="dataval2 in dataval1.Resources" template="{{mainPage}}" compile-data="x" >
                                    <!--<td template="{{mainPage}}" compile-data="x"> </td> -->
                                </tr>
                                <tr class="tbody1 dsplyhde" data-ng-repeat="dataval2 in dataval1.Resources" template="{{mainPagechange}}" compile-data="x" >
                                    <!--<td template="{{mainPage}}" compile-data="x"> </td> -->
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="clearfix" />
                </div>
            </div>
            <div class="clearfix" />
            <h1 class="newh1">Resource Availability Table</h1>
            <div class="clearfix" />
            <div class="table2" id="lasttable">
                <table class="workingweeks">
                    <tr>
                        <thead>
                            <tr><th></th> </tr>
                        </thead>
                    </tr>
                    <tr class="tbody1 resourcetable" data-ng-repeat="dataval2 in dataval.Resources" template="{{mainPage}}" compile-data="x" />
                    </table>
                    <div class="clearfix"></div>
                </div>
            </div>
        </div>
        <div class="clearfix"></div>
    </div>
</div>
</body>
</html>
</apex:page>